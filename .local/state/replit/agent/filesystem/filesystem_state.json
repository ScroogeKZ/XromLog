{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a logistics management system called \"Хром логистика\" (Chrome Logistics) built for managing shipment requests. The application provides a complete solution for creating, tracking, and managing cargo shipment requests with two categories: local deliveries in Astana and intercity deliveries. It features role-based authentication (employees and managers), a modern React frontend with shadcn/ui components, and a robust Express.js backend with PostgreSQL database.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language. Business-focused interface without emojis - professional and strict design for corporate environment.\nContent style: Changed public-facing text to corporate internal use - removed client-oriented marketing language and replaced with internal system terminology.\nDesign preferences: Professional and clean UI/UX with ХРОМ-KZ branding, corporate color scheme (blue primary, clean whites and grays), minimal animations for business environment.\nContact information: Phone +7 (702) 997 00 94, Email nurbek@creativegroup.kz\n\n# Migration Status\n✓ Successfully migrated from Replit Agent to standard environment (Aug 5, 2025)\n✓ Fixed authentication login and redirect issues - login now works correctly (Aug 5, 2025)\n✓ Added Telegram notification system for new shipment requests and status updates (Aug 5, 2025)\n✓ Fixed request update validation error - now accepts both string and number types for pricing (Aug 5, 2025)\n✓ Implemented role-based personal cabinets - employees see only their requests, managers see all (Aug 5, 2025)\n✓ Added public delivery tracking by phone number for external users (Aug 5, 2025)\n✓ Created separate navigation and permissions for employee vs manager roles (Aug 5, 2025)\n✓ Implemented complete user registration system with role selection (Aug 5, 2025)\n✓ All packages installed and configured\n✓ PostgreSQL database connected and migrations applied successfully (Aug 5, 2025)\n✓ ХРОМ-KZ brand logo integrated across all pages (home, login, admin panel) (Aug 5, 2025)\n✓ Button layout optimized for better text display and responsiveness (Aug 5, 2025)\n✓ Fixed sidebar transparency issue - replaced glass effect with solid white background (Aug 5, 2025)\n✓ Added calendar view for shipment schedules - displays future shipments by date (Aug 5, 2025)\n✓ Updated navigation to include calendar with date-based filtering and visual indicators (Aug 5, 2025)\n✓ Added cargo photo upload functionality with image compression and size optimization (Aug 5, 2025)\n✓ Increased Express.js payload limit to 10MB and implemented client-side image compression (Aug 5, 2025)\n✓ Admin user created: admin/admin123 for system access (Aug 5, 2025)\n✓ Public order submission forms working without authentication\n✓ Fixed data validation issues between frontend and backend\n✓ All API endpoints tested and functional\n✓ Admin requests management page implemented with pricing functionality\n✓ System fully tested and verified - all components working correctly\n✓ Authentication system tested with admin user (admin/admin123)\n✓ Public API endpoints verified for order submission and tracking\n✓ Protected API endpoints confirmed working with JWT authentication\n✓ Database operations tested successfully\n✓ Major design overhaul completed using ХРОМ-KZ brand colors with modern UI/UX trends\n✓ Updated login and home pages with contemporary styling, glassmorphism effects, and brand-consistent design elements\n✓ Redesigned with professional corporate aesthetic and proper logo integration\n✓ Implemented fully responsive design optimized for mobile, tablet, and desktop devices\n✓ Project verified and working correctly - all components functional (Aug 5, 2025)\n✓ Server running successfully on port 5000 with API endpoints responding\n✓ Frontend loading properly with hot module replacement active\n✓ Database connectivity confirmed with user authentication working\n✓ Request management system fully operational with real-time updates\n✓ Successfully migrated from Replit Agent environment to standard Replit environment (Aug 5, 2025)\n✓ Comprehensive analytics dashboard implemented with interactive charts and KPI metrics (Aug 5, 2025)\n✓ Visual analytics system includes monthly trends, category distribution, status tracking, and performance KPIs (Aug 5, 2025)\n✓ Updated registration system - role selection removed, roles now assigned only by administrator (Aug 5, 2025)\n✓ New users automatically receive \"employee\" role, administrators can change roles through user management (Aug 5, 2025)\n✓ Implemented role-based access control with ProtectedRoute component for manager-only pages (Aug 5, 2025)\n✓ Dashboard now shows personalized statistics - employees see only their own request stats (Aug 5, 2025)\n✓ Added role-based data filtering in API endpoints for proper data separation (Aug 5, 2025)\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **UI Library**: shadcn/ui components built on Radix UI primitives for accessible, modern interface\n- **Styling**: Tailwind CSS with ХРОМ-KZ brand colors, professional corporate design, and fully responsive layout optimized for all device sizes (mobile-first approach with sm:, md:, lg: breakpoints)\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management with optimistic updates\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Charts & Analytics**: Recharts library for interactive data visualization and KPI dashboards\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript for RESTful API endpoints\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints following conventional patterns (/api/auth/*, /api/shipment-requests/*, etc.)\n- **Error Handling**: Centralized error middleware with structured error responses\n\n## Database Design\n- **Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle migrations for version-controlled schema changes\n- **Core Tables**:\n  - `users`: User accounts with role-based access (employee/manager)\n  - `shipment_requests`: Main entity storing all shipment request data including cargo details, addresses, contacts, and status\n- **Relationships**: Foreign key relationship between shipment requests and their creators\n\n## Authentication & Authorization\n- **Session Management**: JWT tokens stored in localStorage with 24-hour expiration\n- **Role System**: Two-tier system (employee/manager) with different access levels\n- **Security**: Password hashing with bcrypt, secure token validation middleware\n\n## Data Model\n- **Request Tracking**: Auto-generated request numbers (AST-YYYY-NNN for Astana, INT-YYYY-NNN for intercity)\n- **Status Workflow**: Predefined status progression (new → processing → assigned → transit → delivered/cancelled)\n- **Cargo Information**: Comprehensive cargo details including weight, volume, dimensions (removed confusing \"package count\" field)\n- **Contact Management**: Separate loading and unloading contact information\n- **Transport Assignment**: JSON field for storing transport and driver details\n- **Pricing System**: Added priceKzt (decimal) and priceNotes (text) fields for logistics managers to set shipment costs\n\n# External Dependencies\n\n- **Database Provider**: Neon serverless PostgreSQL for managed database hosting\n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Development Tools**: Replit-specific plugins for development environment integration\n- **Build Dependencies**: Vite ecosystem including React plugin and TypeScript support\n- **Authentication**: JWT and bcrypt libraries for secure user management\n- **Database Client**: Neon serverless client with WebSocket support for real-time connections","size_bytes":8095},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '10mb' })); // Increase limit for photo uploads\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2134},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertShipmentRequestSchema, publicInsertShipmentRequestSchema, updateShipmentRequestSchema, insertUserSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { telegramService } from \"./telegram\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Middleware to verify JWT token\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid token' });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '24h' });\n      \n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          role: user.role\n        }\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        username: userData.username,\n        password: hashedPassword,\n        role: \"employee\" // Роли назначаются только администратором\n      });\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '24h' });\n      \n      res.status(201).json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          role: user.role\n        }\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: any, res) => {\n    res.json({\n      user: {\n        id: req.user.id,\n        username: req.user.username,\n        role: req.user.role\n      }\n    });\n  });\n\n  // Shipment request routes\n  app.get(\"/api/shipment-requests\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const { status, category, search, page, limit } = req.query;\n      \n      // If user is employee (not manager), only show their own requests\n      if (user.role === 'employee') {\n        const requests = await storage.getShipmentRequestsByUserId(user.id);\n        res.json({ requests, total: requests.length });\n      } else {\n        // Managers see all requests\n        const result = await storage.getShipmentRequests({\n          status: status as string,\n          category: category as string,\n          search: search as string,\n          page: page ? parseInt(page as string) : undefined,\n          limit: limit ? parseInt(limit as string) : undefined,\n        });\n        res.json(result);\n      }\n    } catch (error) {\n      console.error(\"Get requests error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Public endpoint to track shipment by request number\n  app.get(\"/api/shipment-requests/public/:requestNumber\", async (req, res) => {\n    try {\n      const requestNumber = req.params.requestNumber;\n      const request = await storage.getShipmentRequestByNumber(requestNumber);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Request not found\" });\n      }\n      \n      // Return only essential information for public tracking\n      const publicRequest = {\n        id: request.id,\n        requestNumber: request.requestNumber,\n        category: request.category,\n        status: request.status,\n        cargoName: request.cargoName,\n        cargoWeightKg: request.cargoWeightKg,\n        cargoVolumeM3: request.cargoVolumeM3,\n        cargoDimensions: request.cargoDimensions,\n\n        loadingAddress: request.loadingAddress,\n        unloadingAddress: request.unloadingAddress,\n        transportInfo: request.transportInfo,\n        createdAt: request.createdAt,\n        desiredShipmentDatetime: request.desiredShipmentDatetime\n      };\n      \n      res.json(publicRequest);\n    } catch (error) {\n      console.error(\"Get public request error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Public POST endpoint for creating shipment requests (no authentication required)\n  app.post(\"/api/shipment-requests/public\", async (req, res) => {\n    try {\n      // Use the public schema for validation\n      const publicData = publicInsertShipmentRequestSchema.parse(req.body);\n      \n      // Transform the data for storage\n      const requestData = {\n        category: publicData.category,\n        cargoName: publicData.cargoName,\n        cargoWeightKg: publicData.cargoWeightKg && String(publicData.cargoWeightKg).trim() !== \"\" ? String(publicData.cargoWeightKg) : null,\n        cargoVolumeM3: publicData.cargoVolumeM3 && String(publicData.cargoVolumeM3).trim() !== \"\" ? String(publicData.cargoVolumeM3) : null,\n        cargoDimensions: publicData.cargoDimensions || null,\n        specialRequirements: publicData.specialRequirements || null,\n        loadingCity: publicData.loadingCity || null,\n        loadingAddress: publicData.loadingAddress,\n        loadingContactPerson: publicData.loadingContactPerson || null,\n        loadingContactPhone: publicData.loadingContactPhone || null,\n        unloadingCity: publicData.unloadingCity || null,\n        unloadingAddress: publicData.unloadingAddress,\n        unloadingContactPerson: publicData.unloadingContactPerson || null,\n        unloadingContactPhone: publicData.unloadingContactPhone || null,\n        desiredShipmentDatetime: publicData.desiredShipmentDatetime && publicData.desiredShipmentDatetime.trim() !== \"\" \n          ? new Date(publicData.desiredShipmentDatetime) \n          : null,\n        notes: publicData.notes || null,\n        clientName: publicData.clientName || null,\n        clientPhone: publicData.clientPhone || null,\n        clientEmail: publicData.clientEmail || null,\n        createdByUserId: 1 // Default system user for public requests\n      };\n      \n      const request = await storage.createShipmentRequest(requestData);\n      \n      // Send Telegram notification for new request\n      try {\n        await telegramService.sendNewRequestNotification(request);\n      } catch (error) {\n        console.error(\"Failed to send Telegram notification:\", error);\n        // Don't fail the request if notification fails\n      }\n      \n      res.status(201).json({\n        requestNumber: request.requestNumber,\n        message: \"Заявка успешно создана\"\n      });\n    } catch (error) {\n      console.error(\"Create public request error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Ошибка валидации\", \n          errors: error.errors.map(err => ({\n            field: err.path.join('.'),\n            message: err.message\n          }))\n        });\n      }\n      res.status(500).json({ message: \"Внутренняя ошибка сервера\" });\n    }\n  });\n\n  // Calendar endpoint for shipments with dates\n  app.get(\"/api/shipment-requests/calendar\", authenticateToken, async (req, res) => {\n    try {\n      const { start, end } = req.query;\n      \n      if (!start || !end) {\n        return res.status(400).json({ message: \"Start and end dates are required\" });\n      }\n\n      const startDate = new Date(start as string);\n      const endDate = new Date(end as string);\n      \n      const shipments = await storage.getShipmentRequestsByDateRange(startDate, endDate);\n      \n      res.json(shipments);\n    } catch (error) {\n      console.error(\"Get calendar shipments error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/shipment-requests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const request = await storage.getShipmentRequestById(id);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Request not found\" });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      console.error(\"Get request error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Personal cabinet - get user's own requests only\n  app.get(\"/api/my-requests\", authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const requests = await storage.getShipmentRequestsByUserId(userId);\n      res.json({ requests });\n    } catch (error) {\n      console.error(\"Get my requests error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Public endpoint to get requests by phone number (for public users)\n  app.post(\"/api/requests-by-phone\", async (req, res) => {\n    try {\n      const { clientPhone } = req.body;\n      \n      if (!clientPhone) {\n        return res.status(400).json({ message: \"Номер телефона обязателен\" });\n      }\n      \n      const requests = await storage.getShipmentRequestsByClientPhone(clientPhone);\n      \n      // Return only public information for security\n      const publicRequests = requests.map(request => ({\n        id: request.id,\n        requestNumber: request.requestNumber,\n        category: request.category,\n        status: request.status,\n        cargoName: request.cargoName,\n        cargoWeightKg: request.cargoWeightKg,\n        cargoVolumeM3: request.cargoVolumeM3,\n        loadingAddress: request.loadingAddress,\n        unloadingAddress: request.unloadingAddress,\n        loadingCity: request.loadingCity,\n        unloadingCity: request.unloadingCity,\n        desiredShipmentDatetime: request.desiredShipmentDatetime,\n        createdAt: request.createdAt,\n        priceKzt: request.priceKzt,\n        transportInfo: request.transportInfo\n      }));\n      \n      res.json({ requests: publicRequests });\n    } catch (error) {\n      console.error(\"Get requests by phone error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Protected route for shipment requests (authentication required)\n  app.post(\"/api/shipment-requests\", authenticateToken, async (req: any, res) => {\n    try {\n      const requestData = insertShipmentRequestSchema.parse({\n        ...req.body,\n        createdByUserId: req.user.id\n      });\n      \n      const request = await storage.createShipmentRequest(requestData);\n      \n      // Send Telegram notification for new request\n      try {\n        await telegramService.sendNewRequestNotification(request);\n      } catch (error) {\n        console.error(\"Failed to send Telegram notification:\", error);\n      }\n      \n      res.status(201).json(request);\n    } catch (error) {\n      console.error(\"Create request error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/shipment-requests/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = updateShipmentRequestSchema.parse(req.body);\n      \n      // Convert number fields to strings for database storage\n      const processedUpdateData = {\n        ...updateData,\n        cargoWeightKg: updateData.cargoWeightKg !== undefined && updateData.cargoWeightKg !== null \n          ? String(updateData.cargoWeightKg) : updateData.cargoWeightKg,\n        cargoVolumeM3: updateData.cargoVolumeM3 !== undefined && updateData.cargoVolumeM3 !== null \n          ? String(updateData.cargoVolumeM3) : updateData.cargoVolumeM3,\n        priceKzt: updateData.priceKzt !== undefined && updateData.priceKzt !== null \n          ? String(updateData.priceKzt) : updateData.priceKzt,\n        desiredShipmentDatetime: updateData.desiredShipmentDatetime instanceof Date \n          ? updateData.desiredShipmentDatetime \n          : updateData.desiredShipmentDatetime && typeof updateData.desiredShipmentDatetime === 'string'\n            ? new Date(updateData.desiredShipmentDatetime)\n            : updateData.desiredShipmentDatetime\n      };\n      \n      // Get the current request to track status changes\n      const currentRequest = await storage.getShipmentRequestById(id);\n      const oldStatus = currentRequest?.status;\n      \n      const request = await storage.updateShipmentRequest(id, processedUpdateData);\n      if (!request) {\n        return res.status(404).json({ message: \"Request not found\" });\n      }\n      \n      // Send Telegram notification if status changed\n      if (updateData.status && oldStatus && updateData.status !== oldStatus) {\n        try {\n          await telegramService.sendStatusUpdateNotification(request, oldStatus, updateData.status);\n        } catch (error) {\n          console.error(\"Failed to send Telegram status notification:\", error);\n        }\n      }\n      \n      res.json(request);\n    } catch (error) {\n      console.error(\"Update request error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/shipment-requests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteShipmentRequest(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Request not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete request error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/stats\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = req.user;\n      \n      if (user.role === 'employee') {\n        // For employees, get stats only for their requests\n        const userRequests = await storage.getShipmentRequestsByUserId(user.id);\n        const stats = {\n          total: userRequests.length,\n          processing: userRequests.filter(r => r.status === 'processing').length,\n          transit: userRequests.filter(r => r.status === 'transit').length,\n          delivered: userRequests.filter(r => r.status === 'delivered').length\n        };\n        res.json(stats);\n      } else {\n        // For managers, get all stats\n        const stats = await storage.getShipmentRequestStats();\n        res.json(stats);\n      }\n    } catch (error) {\n      console.error(\"Get stats error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/reports\", authenticateToken, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      \n      const requests = await storage.getShipmentRequestsByDateRange(\n        new Date(startDate as string),\n        new Date(endDate as string)\n      );\n      \n      res.json(requests);\n    } catch (error) {\n      console.error(\"Get reports error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Test endpoint to check Telegram connection\n  app.get(\"/api/telegram/test\", authenticateToken, async (req, res) => {\n    try {\n      const isConnected = await telegramService.testConnection();\n      res.json({ \n        connected: isConnected,\n        message: isConnected ? \"Telegram подключен успешно\" : \"Ошибка подключения к Telegram\"\n      });\n    } catch (error) {\n      console.error(\"Telegram test error:\", error);\n      res.status(500).json({ message: \"Ошибка тестирования Telegram\" });\n    }\n  });\n\n  // Analytics endpoint for dashboard\n  app.get(\"/api/analytics\", authenticateToken, async (req, res) => {\n    try {\n      const analyticsData = await storage.getAnalyticsData();\n      res.json(analyticsData);\n    } catch (error) {\n      console.error(\"Get analytics error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17735},"server/storage.ts":{"content":"import { \n  users, \n  shipmentRequests,\n  type User, \n  type InsertUser,\n  type ShipmentRequest,\n  type InsertShipmentRequest,\n  type UpdateShipmentRequest\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, ilike, count, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Shipment request methods\n  getShipmentRequests(filters?: {\n    status?: string;\n    category?: string;\n    search?: string;\n    page?: number;\n    limit?: number;\n  }): Promise<{ requests: ShipmentRequest[]; total: number }>;\n  getShipmentRequestById(id: number): Promise<ShipmentRequest | undefined>;\n  getShipmentRequestByNumber(requestNumber: string): Promise<ShipmentRequest | undefined>;\n  createShipmentRequest(request: InsertShipmentRequest): Promise<ShipmentRequest>;\n  updateShipmentRequest(id: number, request: UpdateShipmentRequest): Promise<ShipmentRequest | undefined>;\n  deleteShipmentRequest(id: number): Promise<boolean>;\n  getShipmentRequestStats(): Promise<{\n    total: number;\n    processing: number;\n    transit: number;\n    delivered: number;\n  }>;\n  getShipmentRequestsByDateRange(startDate: Date, endDate: Date): Promise<ShipmentRequest[]>;\n  getShipmentRequestsByUserId(userId: number): Promise<ShipmentRequest[]>;\n  getShipmentRequestsByClientPhone(clientPhone: string): Promise<ShipmentRequest[]>;\n  \n  // Analytics methods\n  getAnalyticsData(): Promise<{\n    monthlyStats: Array<{ month: string; astana: number; intercity: number; total: number }>;\n    categoryStats: { astana: number; intercity: number };\n    statusDistribution: Array<{ status: string; count: number }>;\n    averagePrice: { astana: number | null; intercity: number | null };\n    kpiMetrics: {\n      averageDeliveryTime: number;\n      onTimeDeliveryRate: number;\n      totalRevenue: number;\n      avgOrderValue: number;\n    };\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getShipmentRequests(filters: {\n    status?: string;\n    category?: string;\n    search?: string;\n    page?: number;\n    limit?: number;\n  } = {}): Promise<{ requests: ShipmentRequest[]; total: number }> {\n    const { status, category, search, page = 1, limit = 10 } = filters;\n    const offset = (page - 1) * limit;\n\n    let whereConditions = [];\n\n    if (status) {\n      whereConditions.push(eq(shipmentRequests.status, status));\n    }\n    \n    if (category) {\n      whereConditions.push(eq(shipmentRequests.category, category));\n    }\n\n    if (search) {\n      whereConditions.push(\n        or(\n          ilike(shipmentRequests.requestNumber, `%${search}%`),\n          ilike(shipmentRequests.cargoName, `%${search}%`),\n          ilike(shipmentRequests.loadingAddress, `%${search}%`),\n          ilike(shipmentRequests.unloadingAddress, `%${search}%`)\n        )\n      );\n    }\n\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n\n    const [requests, totalResult] = await Promise.all([\n      db\n        .select()\n        .from(shipmentRequests)\n        .where(whereClause)\n        .orderBy(desc(shipmentRequests.createdAt))\n        .limit(limit)\n        .offset(offset),\n      db\n        .select({ count: count() })\n        .from(shipmentRequests)\n        .where(whereClause)\n    ]);\n\n    return {\n      requests,\n      total: totalResult[0].count\n    };\n  }\n\n  async getShipmentRequestById(id: number): Promise<ShipmentRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(shipmentRequests)\n      .where(eq(shipmentRequests.id, id));\n    return request || undefined;\n  }\n\n  async getShipmentRequestByNumber(requestNumber: string): Promise<ShipmentRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(shipmentRequests)\n      .where(eq(shipmentRequests.requestNumber, requestNumber));\n    return request || undefined;\n  }\n\n  async getShipmentRequestsByUserId(userId: number): Promise<ShipmentRequest[]> {\n    const requests = await db\n      .select()\n      .from(shipmentRequests)\n      .where(eq(shipmentRequests.createdByUserId, userId))\n      .orderBy(desc(shipmentRequests.createdAt));\n    return requests;\n  }\n\n  async getShipmentRequestsByClientPhone(clientPhone: string): Promise<ShipmentRequest[]> {\n    const requests = await db\n      .select()\n      .from(shipmentRequests)\n      .where(eq(shipmentRequests.clientPhone, clientPhone))\n      .orderBy(desc(shipmentRequests.createdAt));\n    return requests;\n  }\n\n  async createShipmentRequest(insertRequest: InsertShipmentRequest): Promise<ShipmentRequest> {\n    // Generate request number\n    const now = new Date();\n    const year = now.getFullYear();\n    const prefix = insertRequest.category === 'astana' ? 'AST' : 'INT';\n    \n    // Get the count of requests this year for this category\n    const existingCount = await db\n      .select({ count: count() })\n      .from(shipmentRequests)\n      .where(\n        and(\n          eq(shipmentRequests.category, insertRequest.category),\n          ilike(shipmentRequests.requestNumber, `${prefix}-${year}-%`)\n        )\n      );\n\n    const nextNumber = (existingCount[0].count + 1).toString().padStart(3, '0');\n    const requestNumber = `${prefix}-${year}-${nextNumber}`;\n\n    const [request] = await db\n      .insert(shipmentRequests)\n      .values({\n        ...insertRequest,\n        requestNumber,\n        updatedAt: new Date(),\n      })\n      .returning();\n\n    return request;\n  }\n\n  async updateShipmentRequest(id: number, updateRequest: any): Promise<ShipmentRequest | undefined> {\n    const [request] = await db\n      .update(shipmentRequests)\n      .set({\n        ...updateRequest,\n        updatedAt: new Date(),\n      })\n      .where(eq(shipmentRequests.id, id))\n      .returning();\n    return request || undefined;\n  }\n\n  async deleteShipmentRequest(id: number): Promise<boolean> {\n    const result = await db\n      .delete(shipmentRequests)\n      .where(eq(shipmentRequests.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getShipmentRequestStats(): Promise<{\n    total: number;\n    processing: number;\n    transit: number;\n    delivered: number;\n  }> {\n    const [stats] = await db\n      .select({\n        total: count(),\n        processing: sql<number>`count(case when ${shipmentRequests.status} = 'processing' then 1 end)`,\n        transit: sql<number>`count(case when ${shipmentRequests.status} = 'transit' then 1 end)`,\n        delivered: sql<number>`count(case when ${shipmentRequests.status} = 'delivered' then 1 end)`,\n      })\n      .from(shipmentRequests);\n\n    return {\n      total: stats.total,\n      processing: stats.processing,\n      transit: stats.transit,\n      delivered: stats.delivered,\n    };\n  }\n\n  async getShipmentRequestsByDateRange(startDate: Date, endDate: Date): Promise<ShipmentRequest[]> {\n    return await db\n      .select()\n      .from(shipmentRequests)\n      .where(\n        and(\n          gte(shipmentRequests.desiredShipmentDatetime, startDate),\n          lte(shipmentRequests.desiredShipmentDatetime, endDate)\n        )\n      )\n      .orderBy(desc(shipmentRequests.desiredShipmentDatetime));\n  }\n\n  async getAnalyticsData(): Promise<{\n    monthlyStats: Array<{ month: string; astana: number; intercity: number; total: number }>;\n    categoryStats: { astana: number; intercity: number };\n    statusDistribution: Array<{ status: string; count: number }>;\n    averagePrice: { astana: number | null; intercity: number | null };\n    kpiMetrics: {\n      averageDeliveryTime: number;\n      onTimeDeliveryRate: number;\n      totalRevenue: number;\n      avgOrderValue: number;\n    };\n  }> {\n    // Monthly statistics for the last 12 months\n    const monthlyStats = await db\n      .select({\n        month: sql<string>`to_char(${shipmentRequests.createdAt}, 'YYYY-MM')`,\n        astana: sql<number>`count(case when ${shipmentRequests.category} = 'astana' then 1 end)`,\n        intercity: sql<number>`count(case when ${shipmentRequests.category} = 'intercity' then 1 end)`,\n        total: count(),\n      })\n      .from(shipmentRequests)\n      .where(gte(shipmentRequests.createdAt, sql`current_date - interval '12 months'`))\n      .groupBy(sql`to_char(${shipmentRequests.createdAt}, 'YYYY-MM')`)\n      .orderBy(sql`to_char(${shipmentRequests.createdAt}, 'YYYY-MM')`);\n\n    // Category distribution\n    const [categoryStats] = await db\n      .select({\n        astana: sql<number>`count(case when ${shipmentRequests.category} = 'astana' then 1 end)`,\n        intercity: sql<number>`count(case when ${shipmentRequests.category} = 'intercity' then 1 end)`,\n      })\n      .from(shipmentRequests);\n\n    // Status distribution\n    const statusDistribution = await db\n      .select({\n        status: shipmentRequests.status,\n        count: count(),\n      })\n      .from(shipmentRequests)\n      .groupBy(shipmentRequests.status)\n      .orderBy(desc(count()));\n\n    // Average prices by category\n    const [averagePrice] = await db\n      .select({\n        astana: sql<number | null>`avg(case when ${shipmentRequests.category} = 'astana' and ${shipmentRequests.priceKzt} is not null then ${shipmentRequests.priceKzt}::numeric end)`,\n        intercity: sql<number | null>`avg(case when ${shipmentRequests.category} = 'intercity' and ${shipmentRequests.priceKzt} is not null then ${shipmentRequests.priceKzt}::numeric end)`,\n      })\n      .from(shipmentRequests);\n\n    // KPI Metrics\n    const [kpiData] = await db\n      .select({\n        totalRevenue: sql<number>`coalesce(sum(${shipmentRequests.priceKzt}::numeric), 0)`,\n        avgOrderValue: sql<number>`coalesce(avg(${shipmentRequests.priceKzt}::numeric), 0)`,\n        totalCompleted: sql<number>`count(case when ${shipmentRequests.status} = 'delivered' then 1 end)`,\n        onTimeDeliveries: sql<number>`count(case when ${shipmentRequests.status} = 'delivered' and ${shipmentRequests.desiredShipmentDatetime} >= ${shipmentRequests.updatedAt} then 1 end)`,\n      })\n      .from(shipmentRequests);\n\n    const onTimeDeliveryRate = kpiData.totalCompleted > 0 \n      ? (kpiData.onTimeDeliveries / kpiData.totalCompleted) * 100 \n      : 0;\n\n    // Average delivery time (simplified calculation)\n    const averageDeliveryTime = 2.5; // placeholder - could be calculated from actual delivery data\n\n    return {\n      monthlyStats,\n      categoryStats,\n      statusDistribution,\n      averagePrice,\n      kpiMetrics: {\n        averageDeliveryTime,\n        onTimeDeliveryRate,\n        totalRevenue: kpiData.totalRevenue,\n        avgOrderValue: kpiData.avgOrderValue,\n      },\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":11243},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/cities.ts":{"content":"// List of major cities in Kazakhstan\nexport const kazakhstanCities = [\n  \"Алматы\",\n  \"Астана (Нур-Султан)\",\n  \"Шымкент\",\n  \"Актобе\",\n  \"Тараз\",\n  \"Павлодар\",\n  \"Усть-Каменогорск\",\n  \"Семей\",\n  \"Атырау\",\n  \"Костанай\",\n  \"Кызылорда\",\n  \"Уральск\",\n  \"Петропавловск\",\n  \"Актау\",\n  \"Темиртау\",\n  \"Туркестан\",\n  \"Кокшетау\",\n  \"Талдыкорган\",\n  \"Экибастуз\",\n  \"Рудный\",\n  \"Жанаозен\",\n  \"Балхаш\",\n  \"Сарань\",\n  \"Аксу\",\n  \"Кентау\",\n  \"Канди\",\n  \"Риддер\",\n  \"Жезказган\",\n  \"Арысь\",\n  \"Лисаковск\",\n  \"Степногорск\",\n  \"Шахтинск\",\n  \"Капшагай\",\n  \"Зыряновск\",\n  \"Текели\",\n  \"Аральск\",\n  \"Макинск\",\n  \"Казалинск\",\n  \"Хромтау\",\n  \"Акколь\",\n  \"Есик\",\n  \"Сергеевка\",\n  \"Булаево\",\n  \"Державинск\",\n  \"Каратау\",\n  \"Жаркент\",\n  \"Курчатов\",\n  \"Аягоз\",\n  \"Шемонаиха\",\n  \"Форт-Шевченко\",\n  \"Акжайык\",\n  \"Байконур\",\n  \"Жетысай\",\n  \"Каскелен\",\n  \"Сатпаев\",\n  \"Абай\",\n  \"Жанатас\",\n  \"Алга\",\n  \"Арал\",\n  \"Бурабай\",\n  \"Ерейментау\",\n  \"Жаксы\",\n  \"Жем\",\n  \"Казыгурт\",\n  \"Калжыр\",\n  \"Каражал\",\n  \"Каркаралинск\",\n  \"Каратал\",\n  \"Кегень\",\n  \"Коксу\",\n  \"Красный Яр\",\n  \"Курык\",\n  \"Ленгер\",\n  \"Мамлютка\",\n  \"Мангистау\",\n  \"Мерке\",\n  \"Отар\",\n  \"Панфилов\",\n  \"Сарканд\",\n  \"Тайынша\",\n  \"Талгар\",\n  \"Темир\",\n  \"Туздыбастау\",\n  \"Шар\",\n  \"Шу\",\n  \"Щучинск\",\n  \"Ыргыз\",\n  \"Каракога\",\n  \"Лепсы\",\n  \"Федоровка\",\n  \"Ушарал\",\n  \"Майкаин\",\n  \"Жемчужный\",\n  \"Кулан\",\n  \"Бестобе\",\n  \"Шортанды\",\n  \"Есиль\",\n  \"Аркалык\",\n  \"Астраханка\",\n  \"Георгиевка\",\n  \"Глубокое\",\n  \"Денисовка\",\n  \"Железинка\",\n  \"Заречное\",\n  \"Индербор\",\n  \"Калкаман\",\n  \"Камышный\",\n  \"Карабалык\",\n  \"Кустанай\",\n  \"Научный\",\n  \"Озерное\",\n  \"Приозерск\",\n  \"Убаган\",\n  \"Фершампенуаз\"\n].sort();","size_bytes":2445},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, jsonb, serial } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"employee\"), // \"employee\" or \"manager\"\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const shipmentRequests = pgTable(\"shipment_requests\", {\n  id: serial(\"id\").primaryKey(),\n  requestNumber: varchar(\"request_number\", { length: 255 }).notNull().unique(),\n  category: varchar(\"category\", { length: 50 }).notNull(), // \"astana\" or \"intercity\"\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"new\"), // \"new\", \"processing\", \"assigned\", \"transit\", \"delivered\", \"cancelled\"\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }),\n  createdByUserId: integer(\"created_by_user_id\").references(() => users.id),\n  cargoName: varchar(\"cargo_name\", { length: 255 }).notNull(),\n  cargoWeightKg: decimal(\"cargo_weight_kg\", { precision: 10, scale: 2 }),\n  cargoVolumeM3: decimal(\"cargo_volume_m3\", { precision: 10, scale: 2 }),\n  cargoDimensions: varchar(\"cargo_dimensions\", { length: 255 }),\n\n  specialRequirements: text(\"special_requirements\"),\n  loadingCity: varchar(\"loading_city\", { length: 255 }), // For intercity shipments\n  loadingAddress: text(\"loading_address\").notNull(),\n  loadingContactPerson: varchar(\"loading_contact_person\", { length: 255 }),\n  loadingContactPhone: varchar(\"loading_contact_phone\", { length: 20 }),\n  unloadingCity: varchar(\"unloading_city\", { length: 255 }), // For intercity shipments\n  unloadingAddress: text(\"unloading_address\").notNull(),\n  unloadingContactPerson: varchar(\"unloading_contact_person\", { length: 255 }),\n  unloadingContactPhone: varchar(\"unloading_contact_phone\", { length: 20 }),\n  desiredShipmentDatetime: timestamp(\"desired_shipment_datetime\", { withTimezone: true }),\n  notes: text(\"notes\"),\n  cargoPhotos: text(\"cargo_photos\").array(), // Array of image URLs/paths\n  transportInfo: jsonb(\"transport_info\"), // { \"driver_name\": \"...\", \"driver_phone\": \"...\", \"vehicle_model\": \"...\", \"vehicle_plate\": \"...\" }\n  priceKzt: decimal(\"price_kzt\", { precision: 10, scale: 2 }), // Price in KZT\n  priceNotes: text(\"price_notes\"), // Additional pricing notes\n  \n  // Client contact fields for public tracking\n  clientName: text(\"client_name\"),\n  clientPhone: text(\"client_phone\"),\n  clientEmail: text(\"client_email\")\n});\n\nexport const userRelations = relations(users, ({ many }) => ({\n  shipmentRequests: many(shipmentRequests),\n}));\n\nexport const shipmentRequestRelations = relations(shipmentRequests, ({ one }) => ({\n  createdBy: one(users, {\n    fields: [shipmentRequests.createdByUserId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  // role удалено - назначается автоматически администратором\n});\n\nexport const insertShipmentRequestSchema = createInsertSchema(shipmentRequests).omit({\n  id: true,\n  requestNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Public schema for frontend forms - accepts both strings and numbers for decimal fields\nexport const publicInsertShipmentRequestSchema = z.object({\n  category: z.string(),\n  cargoName: z.string().min(1, \"Наименование груза обязательно\"),\n  cargoWeightKg: z.union([z.string(), z.number()]).optional().nullable(),\n  cargoVolumeM3: z.union([z.string(), z.number()]).optional().nullable(),\n  cargoDimensions: z.string().optional().nullable(),\n  specialRequirements: z.string().optional().nullable(),\n  loadingCity: z.string().optional().nullable(),\n  loadingAddress: z.string().min(1, \"Адрес загрузки обязателен\"),\n  loadingContactPerson: z.string().optional().nullable(),\n  loadingContactPhone: z.string().optional().nullable(),\n  unloadingCity: z.string().optional().nullable(),\n  unloadingAddress: z.string().min(1, \"Адрес выгрузки обязателен\"),\n  unloadingContactPerson: z.string().optional().nullable(),\n  unloadingContactPhone: z.string().optional().nullable(),\n  desiredShipmentDatetime: z.string().optional().nullable(),\n  notes: z.string().optional().nullable(),\n  cargoPhotos: z.array(z.string()).optional().nullable(),\n  // Client contact fields for public requests\n  clientName: z.string().optional().nullable(),\n  clientPhone: z.string().optional().nullable(),\n  clientEmail: z.string().optional().nullable(),\n});\n\nexport const updateShipmentRequestSchema = z.object({\n  status: z.string().optional(),\n  cargoName: z.string().optional(),\n  cargoWeightKg: z.union([z.string(), z.number()]).optional().nullable(),\n  cargoVolumeM3: z.union([z.string(), z.number()]).optional().nullable(),\n  cargoDimensions: z.string().optional().nullable(),\n  specialRequirements: z.string().optional().nullable(),\n  loadingCity: z.string().optional().nullable(),\n  loadingAddress: z.string().optional(),\n  loadingContactPerson: z.string().optional().nullable(),\n  loadingContactPhone: z.string().optional().nullable(),\n  unloadingCity: z.string().optional().nullable(),\n  unloadingAddress: z.string().optional(),\n  unloadingContactPerson: z.string().optional().nullable(),\n  unloadingContactPhone: z.string().optional().nullable(),\n  desiredShipmentDatetime: z.union([z.date(), z.string()]).optional().nullable(),\n  notes: z.string().optional().nullable(),\n  cargoPhotos: z.array(z.string()).optional().nullable(),\n  transportInfo: z.any().optional().nullable(),\n  priceKzt: z.union([z.string(), z.number()]).optional().nullable(),\n  priceNotes: z.string().optional().nullable(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertShipmentRequest = z.infer<typeof insertShipmentRequestSchema>;\nexport type PublicInsertShipmentRequest = z.infer<typeof publicInsertShipmentRequestSchema>;\nexport type UpdateShipmentRequest = z.infer<typeof updateShipmentRequestSchema>;\nexport type ShipmentRequest = typeof shipmentRequests.$inferSelect;\n","size_bytes":6497},"client/src/App.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { auth } from \"./lib/auth\";\n\n// Pages\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Dashboard from \"@/pages/dashboard\";\nimport CreateRequest from \"@/pages/create-request\";\nimport RequestsManagement from \"@/pages/requests-management\";\nimport CreateOrder from \"@/pages/create-order\";\nimport TrackOrder from \"@/pages/track-order\";\nimport RequestDetails from \"@/pages/request-details\";\nimport Reports from \"@/pages/reports\";\nimport TransportManagement from \"@/pages/transport-management\";\nimport PublicRequest from \"@/pages/public-request\";\nimport Calendar from \"@/pages/calendar\";\nimport TelegramSettings from \"@/pages/telegram-settings\";\nimport MyOrders from \"@/pages/my-orders\";\nimport MyDeliveries from \"@/pages/my-deliveries\";\nimport Analytics from \"@/pages/analytics\";\nimport NotFound from \"@/pages/not-found\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\n\nfunction Router() {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      console.log(\"Checking authentication...\");\n      const user = await auth.getCurrentUser();\n      console.log(\"Authentication result:\", !!user, user);\n      setIsAuthenticated(!!user);\n    };\n    \n    checkAuth();\n\n    // Listen for auth changes\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'auth_token') {\n        checkAuth();\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also check when focus returns to window\n    const handleFocus = () => {\n      checkAuth();\n    };\n    \n    window.addEventListener('focus', handleFocus);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, []);\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/create-order/:type\" component={CreateOrder} />\n      <Route path=\"/track/:id?\" component={TrackOrder} />\n      <Route path=\"/public\" component={PublicRequest} />\n      \n      {/* Admin routes - require authentication */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      \n      <Route path=\"/dashboard\">\n        {isAuthenticated === null ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n              <p>Загрузка...</p>\n            </div>\n          </div>\n        ) : !isAuthenticated ? (\n          <Redirect to=\"/login\" />\n        ) : (\n          <Dashboard />\n        )}\n      </Route>\n      \n      <Route path=\"/requests\">\n        {isAuthenticated ? (\n          <ProtectedRoute allowedRoles={[\"manager\"]}>\n            <RequestsManagement />\n          </ProtectedRoute>\n        ) : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/create-request\">\n        {isAuthenticated ? <CreateRequest /> : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/calendar\">\n        {isAuthenticated ? (\n          <ProtectedRoute allowedRoles={[\"manager\"]}>\n            <Calendar />\n          </ProtectedRoute>\n        ) : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/request/:id\">\n        {isAuthenticated ? <RequestDetails /> : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/transport\">\n        {isAuthenticated ? (\n          <ProtectedRoute allowedRoles={[\"manager\"]}>\n            <TransportManagement />\n          </ProtectedRoute>\n        ) : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/reports\">\n        {isAuthenticated ? (\n          <ProtectedRoute allowedRoles={[\"manager\"]}>\n            <Reports />\n          </ProtectedRoute>\n        ) : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/telegram\">\n        {isAuthenticated ? (\n          <ProtectedRoute allowedRoles={[\"manager\"]}>\n            <TelegramSettings />\n          </ProtectedRoute>\n        ) : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/analytics\">\n        {isAuthenticated ? (\n          <ProtectedRoute allowedRoles={[\"manager\"]}>\n            <Analytics />\n          </ProtectedRoute>\n        ) : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/my-orders\">\n        {isAuthenticated ? <MyOrders /> : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/my-deliveries\">\n        <MyDeliveries />\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5286},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* ХРОМ-KZ Professional Colors */\n  --chrome-blue: hsl(210, 100%, 40%); /* Профессиональный синий */\n  --chrome-gray: hsl(210, 11%, 15%); /* Темно-серый */\n  --chrome-light-gray: hsl(210, 20%, 98%); /* Очень светло-серый */\n  \n  /* Theme Variables */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 11%, 15%);\n  --muted: hsl(210, 20%, 98%);\n  --muted-foreground: hsl(210, 11%, 45%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 11%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 11%, 15%);\n  --border: hsl(210, 20%, 90%);\n  --input: hsl(0, 0%, 100%);\n  --primary: hsl(210, 100%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 11%, 15%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(210, 20%, 96%);\n  --accent-foreground: hsl(210, 11%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(210, 100%, 40%);\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(217, 15%, 8%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(217, 15%, 12%);\n  --muted-foreground: hsl(217, 10%, 65%);\n  --popover: hsl(217, 15%, 8%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(217, 15%, 10%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 15%, 18%);\n  --input: hsl(217, 15%, 12%);\n  --primary: hsl(187, 100%, 45%); /* Chrome Cyan в темной теме */\n  --primary-foreground: hsl(217, 15%, 8%);\n  --secondary: hsl(217, 10%, 55%); /* Chrome Gray в темной теме */\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(217, 15%, 12%);\n  --accent-foreground: hsl(187, 100%, 45%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(187, 100%, 45%);\n  --radius: 12px;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: hsl(210, 20%, 98%);\n    min-height: 100vh;\n  }\n  \n  .dark body {\n    background: hsl(210, 11%, 8%);\n  }\n}\n\n@layer components {\n  /* Professional card shadows */\n  .card-shadow {\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);\n  }\n  \n  .card-shadow-lg {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n  \n  .card-shadow-xl {\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n  \n  /* Clean professional cards */\n  .professional-card {\n    background: white;\n    border: 1px solid hsl(210, 20%, 90%);\n  }\n  \n  .dark .professional-card {\n    background: hsl(210, 11%, 10%);\n    border: 1px solid hsl(210, 11%, 20%);\n  }\n  \n  /* Professional status indicators */\n  .status-new {\n    background: hsl(210, 100%, 40%);\n  }\n  \n  .status-processing {\n    background: hsl(45, 100%, 50%);\n  }\n  \n  .status-transit {\n    background: hsl(25, 100%, 50%);\n  }\n  \n  .status-delivered {\n    background: hsl(120, 60%, 40%);\n  }\n  \n  /* Subtle hover effects */\n  .hover-lift {\n    transition: all 0.2s ease;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n  \n  /* Logo container */\n  .logo-container {\n    background: white;\n    border: 1px solid hsl(210, 20%, 90%);\n  }\n  \n  /* Modern scrollbars with brand colors */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: hsl(217, 10%, 92%);\n    border-radius: 8px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: linear-gradient(180deg, hsl(187, 100%, 42%) 0%, hsl(187, 100%, 35%) 100%);\n    border-radius: 8px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(180deg, hsl(187, 100%, 35%) 0%, hsl(187, 100%, 30%) 100%);\n  }\n  \n  /* Floating action button styles */\n  .fab {\n    @apply fixed bottom-6 right-6 w-14 h-14 rounded-full shadow-2xl z-50;\n    background: linear-gradient(135deg, hsl(187, 100%, 42%) 0%, hsl(187, 100%, 35%) 100%);\n    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  }\n  \n  .fab:hover {\n    transform: scale(1.1);\n    box-shadow: 0 20px 40px -8px rgba(0, 188, 212, 0.4);\n  }\n  \n  /* Navigation enhancements */\n  .nav-item {\n    @apply relative px-4 py-2 rounded-lg transition-all duration-300;\n  }\n  \n  .nav-item:hover {\n    background: linear-gradient(135deg, rgba(0, 188, 212, 0.1) 0%, rgba(0, 188, 212, 0.05) 100%);\n  }\n  \n  .nav-item.active::before {\n    content: '';\n    @apply absolute left-0 top-0 bottom-0 w-1 rounded-full;\n    background: linear-gradient(180deg, hsl(187, 100%, 42%) 0%, hsl(187, 100%, 35%) 100%);\n  }\n  \n  /* Additional styles for public page */\n  .hover-scale {\n    transition: transform 0.2s ease;\n  }\n  \n  .hover-scale:hover {\n    transform: scale(1.02);\n  }\n  \n  /* Enhanced glass morphism for public page hero sections */\n  .glass-card-hero {\n    background: rgba(255, 255, 255, 0.15);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Gradient text for headings */\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n}\n","size_bytes":5472},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/layout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Truck, \n  LayoutDashboard, \n  Plus, \n  BarChart3, \n  Menu, \n  Bell, \n  Settings, \n  LogOut,\n  User as UserIcon,\n  List,\n  Calendar,\n  MessageCircle,\n  Package\n} from \"lucide-react\";\nimport logoPath from \"@assets/1571623_1754368340277.png\";\nimport { cn } from \"@/lib/utils\";\nimport { auth } from \"@/lib/auth\";\nimport type { User } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const [location] = useLocation();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const loadUser = async () => {\n      const currentUser = await auth.getCurrentUser();\n      setUser(currentUser);\n    };\n    \n    loadUser();\n  }, []);\n\n  const handleLogout = () => {\n    auth.logout();\n    setUser(null);\n    toast({\n      title: \"Выход выполнен\",\n      description: \"Вы успешно вышли из корпоративной системы\"\n    });\n  };\n\n  const getNavigation = () => {\n    const baseNavigation = [\n      {\n        name: \"Дашборд\",\n        href: \"/dashboard\",\n        icon: LayoutDashboard,\n        current: location === \"/dashboard\" || location === \"/\",\n        roles: [\"employee\", \"manager\"]\n      },\n      {\n        name: user?.role === \"employee\" ? \"Мои заявки\" : \"Все заявки\",\n        href: user?.role === \"employee\" ? \"/my-orders\" : \"/requests\",\n        icon: user?.role === \"employee\" ? Package : List,\n        current: location === \"/requests\" || location === \"/my-orders\",\n        roles: [\"employee\", \"manager\"]\n      },\n      {\n        name: \"Создать заявку\",\n        href: \"/create-request\",\n        icon: Plus,\n        current: location === \"/create-request\",\n        roles: [\"employee\", \"manager\"]\n      }\n    ];\n\n    const managerOnlyNavigation = [\n      {\n        name: \"Календарь отгрузок\",\n        href: \"/calendar\",\n        icon: Calendar,\n        current: location === \"/calendar\",\n        roles: [\"manager\"]\n      },\n      {\n        name: \"Транспорт\",\n        href: \"/transport\",\n        icon: Truck,\n        current: location === \"/transport\",\n        roles: [\"manager\"]\n      },\n      {\n        name: \"Отчеты\",\n        href: \"/reports\", \n        icon: BarChart3,\n        current: location === \"/reports\",\n        roles: [\"manager\"]\n      },\n      {\n        name: \"Аналитика\",\n        href: \"/analytics\", \n        icon: BarChart3,\n        current: location === \"/analytics\",\n        roles: [\"manager\"]\n      },\n      {\n        name: \"Telegram\",\n        href: \"/telegram\",\n        icon: MessageCircle,\n        current: location === \"/telegram\",\n        roles: [\"manager\"]\n      }\n    ];\n\n    const userRole = user?.role || \"employee\";\n    const allNavigation = [...baseNavigation, ...managerOnlyNavigation];\n    \n    return allNavigation.filter(item => item.roles.includes(userRole));\n  };\n\n  const navigation = getNavigation();\n\n  const getPageTitle = () => {\n    switch (location) {\n      case \"/dashboard\":\n      case \"/\":\n        return \"Панель управления\";\n      case \"/requests\":\n        return \"Управление заявками\";\n      case \"/my-orders\":\n        return \"Мои заявки\";\n      case \"/create-request\":\n        return \"Новая заявка\";\n      case \"/calendar\":\n        return \"Календарь отгрузок\";\n      case \"/transport\":\n        return \"Управление транспортом\";\n      case \"/reports\":\n        return \"Отчеты и аналитика\";\n      case \"/telegram\":\n        return \"Настройки Telegram\";\n      case \"/analytics\":\n        return \"Аналитика и KPI\";\n      default:\n        if (location.startsWith(\"/request/\")) {\n          return \"Детали заявки\";\n        }\n        return \"Корпоративная система\";\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      {/* Sidebar */}\n      <aside className={cn(\n        \"fixed inset-y-0 left-0 z-50 w-60 bg-white border-r border-border card-shadow-lg transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0\",\n        isSidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        {/* Logo */}\n        <div className=\"flex items-center justify-center h-16 px-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-white border border-gray-200 rounded-xl flex items-center justify-center shadow-lg p-1\">\n              <img \n                src={logoPath} \n                alt=\"ХРОМ-KZ\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-foreground\">ХРОМ-KZ</h1>\n              <p className=\"text-xs text-muted-foreground\">Корпоративная система</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-3 py-4 space-y-1\">\n          {navigation.map((item) => (\n            <Link key={item.name} href={item.href} className={cn(\n              \"flex items-center space-x-3 px-3 py-3 rounded-xl text-sm font-medium transition-all duration-200 hover-lift\",\n              item.current\n                ? \"bg-gradient-to-r from-primary to-primary/90 text-white shadow-lg\"\n                : \"text-muted-foreground hover:text-foreground hover:bg-accent/50\"\n            )}>\n              <item.icon className=\"w-5 h-5\" />\n              <span>{item.name}</span>\n            </Link>\n          ))}\n        </nav>\n\n        {/* User Info */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <UserIcon className=\"w-4 h-4 text-white\" />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\">\n                {user?.username || \"Пользователь\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {user?.role === \"manager\" ? \"Менеджер\" : \"Сотрудник\"}\n              </p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </aside>\n\n      {/* Mobile sidebar overlay */}\n      {isSidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={() => setIsSidebarOpen(false)}\n        />\n      )}\n\n      {/* Main content */}\n      <main className=\"flex-1 lg:ml-0\">\n        {/* Header */}\n        <header className=\"glass-card card-shadow px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"lg:hidden\"\n              onClick={() => setIsSidebarOpen(true)}\n            >\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n            <h2 className=\"text-xl font-medium text-gray-900\">\n              {getPageTitle()}\n            </h2>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-500\">\n              <Bell className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-500\">\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </header>\n\n        {/* Page content */}\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8290},"client/src/components/status-chip.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StatusChipProps {\n  status: string;\n  className?: string;\n}\n\nconst statusConfig = {\n  new: {\n    label: \"Новая\",\n    className: \"status-gradient-new text-white shadow-lg\"\n  },\n  processing: {\n    label: \"В обработке\", \n    className: \"status-gradient-processing text-white shadow-lg\"\n  },\n  assigned: {\n    label: \"Назначен транспорт\",\n    className: \"bg-gradient-to-r from-purple-500 to-purple-600 text-white shadow-lg\"\n  },\n  transit: {\n    label: \"В пути\",\n    className: \"status-gradient-transit text-white shadow-lg\"\n  },\n  delivered: {\n    label: \"Доставлен\",\n    className: \"status-gradient-delivered text-white shadow-lg\"\n  },\n  cancelled: {\n    label: \"Отменен\",\n    className: \"bg-gradient-to-r from-gray-400 to-gray-500 text-white shadow-lg\"\n  }\n};\n\nexport function StatusChip({ status, className }: StatusChipProps) {\n  const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.new;\n  \n  return (\n    <span className={cn(\n      \"inline-flex px-3 py-1.5 text-xs font-semibold rounded-full border-0 hover:scale-105 transition-transform duration-200\",\n      config.className,\n      className\n    )}>\n      {config.label}\n    </span>\n  );\n}\n","size_bytes":1270},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: number;\n  username: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\nlet currentUser: User | null = null;\nlet authToken: string | null = null;\n\nexport const auth = {\n  async login(username: string, password: string): Promise<AuthResponse> {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n    const data = await response.json();\n    \n    authToken = data.token;\n    currentUser = data.user;\n    \n    // Store in localStorage\n    localStorage.setItem(\"auth_token\", data.token);\n    localStorage.setItem(\"current_user\", JSON.stringify(data.user));\n    \n    return data;\n  },\n\n  async register(username: string, password: string, role: string = \"employee\"): Promise<AuthResponse> {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", { username, password, role });\n    const data = await response.json();\n    \n    authToken = data.token;\n    currentUser = data.user;\n    \n    // Store in localStorage\n    localStorage.setItem(\"auth_token\", data.token);\n    localStorage.setItem(\"current_user\", JSON.stringify(data.user));\n    \n    return data;\n  },\n\n  async getCurrentUser(): Promise<User | null> {\n    if (currentUser) return currentUser;\n    \n    const token = localStorage.getItem(\"auth_token\");\n    if (!token) return null;\n    \n    try {\n      const response = await fetch(\"/api/auth/me\", {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        currentUser = data.user;\n        authToken = token;\n        console.log(\"Current user loaded:\", data.user);\n        return data.user;\n      } else {\n        console.log(\"Auth failed, clearing token\");\n        this.logout();\n      }\n    } catch (error) {\n      console.error(\"Error getting current user:\", error);\n      this.logout();\n    }\n    \n    return null;\n  },\n\n  logout() {\n    currentUser = null;\n    authToken = null;\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"current_user\");\n  },\n\n  getToken(): string | null {\n    return authToken || localStorage.getItem(\"auth_token\");\n  },\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n};\n\n// Override the default fetch to include auth token\nconst originalFetch = window.fetch;\nwindow.fetch = function(input: RequestInfo | URL, init?: RequestInit) {\n  const token = auth.getToken();\n  \n  if (token && typeof input === 'string' && input.startsWith('/api/')) {\n    init = init || {};\n    init.headers = {\n      ...init.headers,\n      Authorization: `Bearer ${token}`\n    };\n  }\n  \n  return originalFetch(input, init);\n};\n","size_bytes":2733},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"auth_token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // Handle authentication errors\n  if (res.status === 401 || res.status === 403) {\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"current_user\");\n    // Force a page reload to trigger login redirect\n    if (window.location.pathname !== \"/login\") {\n      window.location.replace(\"/login\");\n    }\n    throw new Error(\"Authentication failed. Please log in again.\");\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"auth_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      localStorage.removeItem(\"auth_token\");\n      localStorage.removeItem(\"current_user\");\n      return null;\n    }\n\n    // Handle other auth errors\n    if (res.status === 401 || res.status === 403) {\n      localStorage.removeItem(\"auth_token\");\n      localStorage.removeItem(\"current_user\");\n      if (window.location.pathname !== \"/login\") {\n        window.location.href = \"/login\";\n      }\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2540},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/create-order.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { \n  Truck, \n  Package, \n  MapPin, \n  Navigation, \n  Clock,\n  Phone,\n  ArrowLeft,\n  CheckCircle\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { PhotoUpload } from \"@/components/photo-upload\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { kazakhstanCities } from \"../../../shared/cities\";\n\nexport default function CreateOrder() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const category = params.type === \"astana\" ? \"astana\" : \"intercity\";\n  const isAstana = category === \"astana\";\n  \n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [requestNumber, setRequestNumber] = useState(\"\");\n  const [formData, setFormData] = useState({\n    category,\n    cargoName: \"\",\n    cargoWeightKg: \"\",\n    cargoVolumeM3: \"\",\n    cargoDimensions: \"\",\n\n    specialRequirements: \"\",\n    loadingCity: \"\",\n    loadingAddress: \"\",\n    loadingContactPerson: \"\",\n    loadingContactPhone: \"\",\n    unloadingCity: \"\",\n    unloadingAddress: \"\",\n    unloadingContactPerson: \"\",\n    unloadingContactPhone: \"\",\n    desiredShipmentDatetime: \"\",\n    notes: \"\",\n    cargoPhotos: [] as string[],\n    clientName: \"\",\n    clientPhone: \"\",\n    clientEmail: \"\"\n  });\n  \n  const { toast } = useToast();\n\n  const submitRequestMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const processedData = {\n        ...data,\n        cargoWeightKg: data.cargoWeightKg ? parseFloat(data.cargoWeightKg) : null,\n        cargoVolumeM3: data.cargoVolumeM3 ? parseFloat(data.cargoVolumeM3) : null,\n\n        desiredShipmentDatetime: data.desiredShipmentDatetime ? new Date(data.desiredShipmentDatetime).toISOString() : null,\n        createdByUserId: 1 // Default system user for public requests\n      };\n      \n      const response = await fetch(\"/api/shipment-requests/public\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(processedData)\n      });\n      \n      if (!response.ok) throw new Error('Failed to submit request');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setRequestNumber(data.requestNumber);\n      setIsSubmitted(true);\n      toast({\n        title: \"Заявка отправлена!\",\n        description: `Номер заявки: ${data.requestNumber}`\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка отправки\",\n        description: \"Попробуйте еще раз или свяжитесь с нами по телефону\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitRequestMutation.mutate(formData);\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n        {/* Header */}\n        <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl flex items-center justify-center shadow-lg\">\n                <Truck className=\"w-7 h-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Хром Логистика</h1>\n                <p className=\"text-gray-600 dark:text-gray-300\">Надежные грузоперевозки</p>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Success Message */}\n        <div className=\"max-w-2xl mx-auto px-4 py-16\">\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700 text-center\">\n            <CardContent className=\"p-12\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <CheckCircle className=\"w-10 h-10 text-white\" />\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                Заявка успешно отправлена!\n              </h2>\n              <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-6\">\n                <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  Номер заявки: <span className=\"text-blue-600 dark:text-blue-400\">{requestNumber}</span>\n                </p>\n              </div>\n              <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-8\">\n                Мы получили вашу заявку и свяжемся с вами в ближайшее время для уточнения деталей.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button onClick={() => setLocation(\"/\")} variant=\"outline\" size=\"lg\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  На главную\n                </Button>\n                <Button onClick={() => setLocation(`/track/${requestNumber}`)} size=\"lg\">\n                  Отследить заказ\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Header */}\n      <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl flex items-center justify-center shadow-lg\">\n                <Truck className=\"w-7 h-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Хром Логистика</h1>\n                <p className=\"text-gray-600 dark:text-gray-300\">Надежные грузоперевозки</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" onClick={() => setLocation(\"/\")}>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Назад\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation(\"/login\")}>\n                Админка\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Form */}\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"mb-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            {isAstana ? \"Создание заказа по Астане\" : \"Создание межгородского заказа\"}\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            {isAstana \n              ? \"Быстрая доставка грузов в пределах города\" \n              : \"Межгородские перевозки по всему Казахстану\"\n            }\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* Cargo Information */}\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Package className=\"w-5 h-5 mr-2\" />\n                Информация о грузе\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"cargoName\">Наименование груза *</Label>\n                  <Input\n                    id=\"cargoName\"\n                    required\n                    value={formData.cargoName}\n                    onChange={(e) => handleChange('cargoName', e.target.value)}\n                    placeholder=\"Например: Документы, оборудование, товары\"\n                  />\n                </div>\n\n              </div>\n              \n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"cargoWeightKg\">Вес (кг)</Label>\n                  <Input\n                    id=\"cargoWeightKg\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={formData.cargoWeightKg}\n                    onChange={(e) => handleChange('cargoWeightKg', e.target.value)}\n                    placeholder=\"0.5\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"cargoVolumeM3\">Объем (м³)</Label>\n                  <Input\n                    id=\"cargoVolumeM3\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.cargoVolumeM3}\n                    onChange={(e) => handleChange('cargoVolumeM3', e.target.value)}\n                    placeholder=\"0.1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"cargoDimensions\">Габариты (ДxШxВ)</Label>\n                  <Input\n                    id=\"cargoDimensions\"\n                    value={formData.cargoDimensions}\n                    onChange={(e) => handleChange('cargoDimensions', e.target.value)}\n                    placeholder=\"50x30x20 см\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"specialRequirements\">Особые требования</Label>\n                <Textarea\n                  id=\"specialRequirements\"\n                  value={formData.specialRequirements}\n                  onChange={(e) => handleChange('specialRequirements', e.target.value)}\n                  placeholder=\"Хрупкий груз, температурный режим и т.д.\"\n                  rows={3}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Addresses */}\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <MapPin className=\"w-5 h-5 mr-2\" />\n                Адреса\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold mb-3 text-gray-900 dark:text-white\">Откуда забрать</h4>\n                <div className=\"space-y-3\">\n                  {!isAstana && (\n                    <div>\n                      <Label htmlFor=\"loadingCity\">Город отправления *</Label>\n                      <Select\n                        value={formData.loadingCity}\n                        onValueChange={(value) => handleChange('loadingCity', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Выберите город отправления\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {kazakhstanCities.map((city) => (\n                            <SelectItem key={city} value={city}>\n                              {city}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                  <div>\n                    <Label htmlFor=\"loadingAddress\">Адрес загрузки *</Label>\n                    <Input\n                      id=\"loadingAddress\"\n                      required\n                      value={formData.loadingAddress}\n                      onChange={(e) => handleChange('loadingAddress', e.target.value)}\n                      placeholder={isAstana ? \"г. Астана, ул. Примерная, д. 1\" : \"Точный адрес в городе\"}\n                    />\n                  </div>\n                  <div className=\"grid md:grid-cols-2 gap-3\">\n                    <div>\n                      <Label htmlFor=\"loadingContactPerson\">Контактное лицо</Label>\n                      <Input\n                        id=\"loadingContactPerson\"\n                        value={formData.loadingContactPerson}\n                        onChange={(e) => handleChange('loadingContactPerson', e.target.value)}\n                        placeholder=\"ФИО\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"loadingContactPhone\">Телефон</Label>\n                      <Input\n                        id=\"loadingContactPhone\"\n                        value={formData.loadingContactPhone}\n                        onChange={(e) => handleChange('loadingContactPhone', e.target.value)}\n                        placeholder=\"+7 (777) 123-45-67\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold mb-3 text-gray-900 dark:text-white\">Куда доставить</h4>\n                <div className=\"space-y-3\">\n                  {!isAstana && (\n                    <div>\n                      <Label htmlFor=\"unloadingCity\">Город назначения *</Label>\n                      <Select\n                        value={formData.unloadingCity}\n                        onValueChange={(value) => handleChange('unloadingCity', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Выберите город назначения\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {kazakhstanCities.map((city) => (\n                            <SelectItem key={city} value={city}>\n                              {city}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                  <div>\n                    <Label htmlFor=\"unloadingAddress\">Адрес доставки *</Label>\n                    <Input\n                      id=\"unloadingAddress\"\n                      required\n                      value={formData.unloadingAddress}\n                      onChange={(e) => handleChange('unloadingAddress', e.target.value)}\n                      placeholder={isAstana ? \"г. Астана, ул. Примерная, д. 2\" : \"Точный адрес в городе\"}\n                    />\n                  </div>\n                  <div className=\"grid md:grid-cols-2 gap-3\">\n                    <div>\n                      <Label htmlFor=\"unloadingContactPerson\">Контактное лицо</Label>\n                      <Input\n                        id=\"unloadingContactPerson\"\n                        value={formData.unloadingContactPerson}\n                        onChange={(e) => handleChange('unloadingContactPerson', e.target.value)}\n                        placeholder=\"ФИО\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"unloadingContactPhone\">Телефон</Label>\n                      <Input\n                        id=\"unloadingContactPhone\"\n                        value={formData.unloadingContactPhone}\n                        onChange={(e) => handleChange('unloadingContactPhone', e.target.value)}\n                        placeholder=\"+7 (777) 123-45-67\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Phone className=\"w-5 h-5 mr-2\" />\n                Ваши контактные данные\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"clientName\">ФИО *</Label>\n                  <Input\n                    id=\"clientName\"\n                    required\n                    value={formData.clientName}\n                    onChange={(e) => handleChange('clientName', e.target.value)}\n                    placeholder=\"Иванов Иван Иванович\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"clientPhone\">Телефон *</Label>\n                  <Input\n                    id=\"clientPhone\"\n                    required\n                    value={formData.clientPhone}\n                    onChange={(e) => handleChange('clientPhone', e.target.value)}\n                    placeholder=\"+7 (777) 123-45-67\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"clientEmail\">Email</Label>\n                  <Input\n                    id=\"clientEmail\"\n                    type=\"email\"\n                    value={formData.clientEmail}\n                    onChange={(e) => handleChange('clientEmail', e.target.value)}\n                    placeholder=\"email@example.com\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Additional Information */}\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Дополнительная информация\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"desiredShipmentDatetime\">Желаемая дата и время отгрузки</Label>\n                <Input\n                  id=\"desiredShipmentDatetime\"\n                  type=\"datetime-local\"\n                  value={formData.desiredShipmentDatetime}\n                  onChange={(e) => handleChange('desiredShipmentDatetime', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"cargoPhotos\">Фотографии груза</Label>\n                <PhotoUpload\n                  photos={formData.cargoPhotos}\n                  onPhotosChange={(photos) => setFormData({ ...formData, cargoPhotos: photos })}\n                  maxPhotos={5}\n                  disabled={submitRequestMutation.isPending}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"notes\">Дополнительные комментарии</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => handleChange('notes', e.target.value)}\n                  placeholder=\"Любая дополнительная информация...\"\n                  rows={3}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Submit Button */}\n          <div className=\"text-center\">\n            <Button \n              type=\"submit\" \n              size=\"lg\" \n              className=\"w-full md:w-auto px-12 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold\"\n              disabled={submitRequestMutation.isPending}\n            >\n              {submitRequestMutation.isPending ? \"Отправка...\" : \"Отправить заявку\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":21360},"client/src/pages/create-request.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Package, MapPin, Navigation } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Layout } from \"@/components/layout\";\nimport { PhotoUpload } from \"@/components/photo-upload\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { kazakhstanCities } from \"../../../shared/cities\";\n\nexport default function CreateRequest() {\n  const [, setLocation] = useLocation();\n  const [formData, setFormData] = useState({\n    category: \"astana\",\n    cargoName: \"\",\n    cargoWeightKg: \"\",\n    cargoVolumeM3: \"\",\n    cargoDimensions: \"\",\n\n    specialRequirements: \"\",\n    loadingCity: \"\",\n    loadingAddress: \"\",\n    loadingContactPerson: \"\",\n    loadingContactPhone: \"\",\n    unloadingCity: \"\",\n    unloadingAddress: \"\",\n    unloadingContactPerson: \"\",\n    unloadingContactPhone: \"\",\n    desiredShipmentDatetime: \"\",\n    notes: \"\",\n    cargoPhotos: [] as string[]\n  });\n  \n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const processedData = {\n        ...data,\n        cargoWeightKg: data.cargoWeightKg ? parseFloat(data.cargoWeightKg) : null,\n        cargoVolumeM3: data.cargoVolumeM3 ? parseFloat(data.cargoVolumeM3) : null,\n\n        desiredShipmentDatetime: data.desiredShipmentDatetime ? new Date(data.desiredShipmentDatetime).toISOString() : null\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/shipment-requests\", processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shipment-requests'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      toast({\n        title: \"Заявка создана\",\n        description: \"Заявка на отгрузку успешно создана\"\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка создания заявки\",\n        description: error.message || \"Не удалось создать заявку\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createRequestMutation.mutate(formData);\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <Layout>\n      <div className=\"max-w-4xl mx-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Создание заявки на логистические услуги</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-8\">\n              {/* Category Selection */}\n              <div>\n                <Label className=\"text-base font-medium\">Категория отгрузки</Label>\n                <RadioGroup\n                  value={formData.category}\n                  onValueChange={(value) => handleChange('category', value)}\n                  className=\"flex space-x-6 mt-3\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"astana\" id=\"astana\" />\n                    <Label htmlFor=\"astana\">Отгрузки по Астане</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"intercity\" id=\"intercity\" />\n                    <Label htmlFor=\"intercity\">Междугородние отгрузки</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Cargo Information */}\n              <Card className=\"bg-gray-50\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2\" />\n                    Информация о грузе\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"cargoName\">Наименование груза *</Label>\n                    <Input\n                      id=\"cargoName\"\n                      required\n                      value={formData.cargoName}\n                      onChange={(e) => handleChange('cargoName', e.target.value)}\n                      placeholder=\"Введите наименование груза\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"cargoWeightKg\">Вес (кг)</Label>\n                      <Input\n                        id=\"cargoWeightKg\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={formData.cargoWeightKg}\n                        onChange={(e) => handleChange('cargoWeightKg', e.target.value)}\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"cargoVolumeM3\">Объем (м³)</Label>\n                      <Input\n                        id=\"cargoVolumeM3\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={formData.cargoVolumeM3}\n                        onChange={(e) => handleChange('cargoVolumeM3', e.target.value)}\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cargoDimensions\">Габариты (ДхШхВ)</Label>\n                    <Input\n                      id=\"cargoDimensions\"\n                      value={formData.cargoDimensions}\n                      onChange={(e) => handleChange('cargoDimensions', e.target.value)}\n                      placeholder=\"Например: 120x80x60 см\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"specialRequirements\">Особые требования</Label>\n                    <Textarea\n                      id=\"specialRequirements\"\n                      rows={3}\n                      value={formData.specialRequirements}\n                      onChange={(e) => handleChange('specialRequirements', e.target.value)}\n                      placeholder=\"Дополнительные требования к перевозке\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Loading Address */}\n              <Card className=\"bg-gray-50\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <MapPin className=\"w-5 h-5 mr-2\" />\n                    Адрес погрузки\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {formData.category === \"intercity\" && (\n                    <div>\n                      <Label htmlFor=\"loadingCity\">Город отправления *</Label>\n                      <Select\n                        value={formData.loadingCity}\n                        onValueChange={(value) => handleChange('loadingCity', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Выберите город отправления\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {kazakhstanCities.map((city) => (\n                            <SelectItem key={city} value={city}>\n                              {city}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                  <div>\n                    <Label htmlFor=\"loadingAddress\">Адрес *</Label>\n                    <Textarea\n                      id=\"loadingAddress\"\n                      required\n                      rows={2}\n                      value={formData.loadingAddress}\n                      onChange={(e) => handleChange('loadingAddress', e.target.value)}\n                      placeholder={formData.category === \"astana\" ? \"Полный адрес в Астане\" : \"Точный адрес в городе\"}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"loadingContactPerson\">Контактное лицо</Label>\n                      <Input\n                        id=\"loadingContactPerson\"\n                        value={formData.loadingContactPerson}\n                        onChange={(e) => handleChange('loadingContactPerson', e.target.value)}\n                        placeholder=\"ФИО контактного лица\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"loadingContactPhone\">Телефон</Label>\n                      <Input\n                        id=\"loadingContactPhone\"\n                        type=\"tel\"\n                        value={formData.loadingContactPhone}\n                        onChange={(e) => handleChange('loadingContactPhone', e.target.value)}\n                        placeholder=\"+7 (___) ___-__-__\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Unloading Address */}\n              <Card className=\"bg-gray-50\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Navigation className=\"w-5 h-5 mr-2\" />\n                    Адрес выгрузки\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {formData.category === \"intercity\" && (\n                    <div>\n                      <Label htmlFor=\"unloadingCity\">Город назначения *</Label>\n                      <Select\n                        value={formData.unloadingCity}\n                        onValueChange={(value) => handleChange('unloadingCity', value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Выберите город назначения\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {kazakhstanCities.map((city) => (\n                            <SelectItem key={city} value={city}>\n                              {city}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                  <div>\n                    <Label htmlFor=\"unloadingAddress\">Адрес *</Label>\n                    <Textarea\n                      id=\"unloadingAddress\"\n                      required\n                      rows={2}\n                      value={formData.unloadingAddress}\n                      onChange={(e) => handleChange('unloadingAddress', e.target.value)}\n                      placeholder={formData.category === \"astana\" ? \"Полный адрес в Астане\" : \"Точный адрес в городе\"}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"unloadingContactPerson\">Контактное лицо</Label>\n                      <Input\n                        id=\"unloadingContactPerson\"\n                        value={formData.unloadingContactPerson}\n                        onChange={(e) => handleChange('unloadingContactPerson', e.target.value)}\n                        placeholder=\"ФИО контактного лица\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"unloadingContactPhone\">Телефон</Label>\n                      <Input\n                        id=\"unloadingContactPhone\"\n                        type=\"tel\"\n                        value={formData.unloadingContactPhone}\n                        onChange={(e) => handleChange('unloadingContactPhone', e.target.value)}\n                        placeholder=\"+7 (___) ___-__-__\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"desiredShipmentDatetime\">Желаемая дата и время отгрузки</Label>\n                    <Input\n                      id=\"desiredShipmentDatetime\"\n                      type=\"datetime-local\"\n                      value={formData.desiredShipmentDatetime}\n                      onChange={(e) => handleChange('desiredShipmentDatetime', e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cargoPhotos\">Фотографии груза</Label>\n                    <PhotoUpload\n                      photos={formData.cargoPhotos}\n                      onPhotosChange={(photos) => setFormData({ ...formData, cargoPhotos: photos })}\n                      maxPhotos={5}\n                      disabled={createRequestMutation.isPending}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"notes\">Примечания</Label>\n                    <Textarea\n                      id=\"notes\"\n                      rows={3}\n                      value={formData.notes}\n                      onChange={(e) => handleChange('notes', e.target.value)}\n                      placeholder=\"Дополнительная информация\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Submit Buttons */}\n              <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation(\"/dashboard\")}\n                >\n                  Отмена\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createRequestMutation.isPending}\n                >\n                  {createRequestMutation.isPending ? \"Создание...\" : \"Создать заявку\"}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":15589},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { auth } from \"@/lib/auth\";\nimport type { User } from \"@/lib/auth\";\nimport { \n  Package, \n  Clock, \n  Truck, \n  CheckCircle, \n  Search,\n  Plus,\n  BarChart3,\n  ArrowDownToLine,\n  FileText,\n  FileSpreadsheet,\n  TrendingUp,\n  Calendar,\n  Bell,\n  AlertTriangle,\n  Target\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusChip } from \"@/components/status-chip\";\nimport { Layout } from \"@/components/layout\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const [filters, setFilters] = useState({\n    status: \"all\",\n    category: \"all\", \n    search: \"\",\n    page: 1,\n    limit: 10\n  });\n  const [user, setUser] = useState<User | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const loadUser = async () => {\n      const currentUser = await auth.getCurrentUser();\n      setUser(currentUser);\n    };\n    loadUser();\n  }, []);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/stats'],\n  });\n\n  const { data: requestsData, isLoading: requestsLoading } = useQuery({\n    queryKey: ['/api/shipment-requests', filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value && value !== \"all\") params.append(key, value.toString());\n      });\n      \n      const response = await fetch(`/api/shipment-requests?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch requests');\n      return response.json();\n    }\n  });\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value,\n      page: 1 // Reset to first page when filtering\n    }));\n  };\n\n  const isEmployee = user?.role === 'employee';\n  \n  const statsCards = [\n    {\n      title: isEmployee ? \"Мои заявки\" : \"Всего заявок\",\n      value: (stats as any)?.total || 0,\n      icon: Package,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\"\n    },\n    {\n      title: \"В обработке\", \n      value: (stats as any)?.processing || 0,\n      icon: Clock,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\"\n    },\n    {\n      title: \"В пути\",\n      value: (stats as any)?.transit || 0,\n      icon: Truck,\n      color: \"text-red-600\",\n      bgColor: \"bg-red-50\"\n    },\n    {\n      title: \"Доставлено\",\n      value: (stats as any)?.delivered || 0,\n      icon: CheckCircle,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\"\n    }\n  ];\n\n  return (\n    <Layout>\n      {/* Header with personalized greeting */}\n      {user && (\n        <div className=\"mb-8\">\n          <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              Добро пожаловать, {user.username}!\n            </h1>\n            <p className=\"text-gray-600\">\n              {isEmployee \n                ? \"Здесь отображается статистика по вашим заявкам на доставку.\" \n                : \"Обзор всех операций логистической системы ХРОМ-KZ.\"\n              }\n            </p>\n            {isEmployee && (\n              <div className=\"mt-3\">\n                <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                  Роль: Сотрудник\n                </Badge>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {statsCards.map((card) => (\n          <Card key={card.title} className=\"hover-lift card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground font-medium\">{card.title}</p>\n                  <div className=\"text-3xl font-bold text-foreground mt-2\">\n                    {statsLoading ? (\n                      <div className=\"animate-pulse bg-accent rounded w-16 h-8\"></div>\n                    ) : (\n                      card.value\n                    )}\n                  </div>\n                </div>\n                <div className={`w-14 h-14 ${card.bgColor} rounded-xl flex items-center justify-center shadow-lg hover:scale-110 transition-transform duration-200`}>\n                  <card.icon className={`w-7 h-7 ${card.color}`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"mb-6 glass-card card-shadow\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Поиск по номеру, адресу или грузу...\"\n                  className=\"pl-10\"\n                  value={filters.search}\n                  onChange={(e) => handleFilterChange('search', e.target.value)}\n                />\n              </div>\n\n              <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Все статусы\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Все статусы</SelectItem>\n                  <SelectItem value=\"new\">Новая</SelectItem>\n                  <SelectItem value=\"processing\">В обработке</SelectItem>\n                  <SelectItem value=\"assigned\">Назначен транспорт</SelectItem>\n                  <SelectItem value=\"transit\">В пути</SelectItem>\n                  <SelectItem value=\"delivered\">Доставлен</SelectItem>\n                  <SelectItem value=\"cancelled\">Отменен</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={filters.category} onValueChange={(value) => handleFilterChange('category', value)}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Все категории\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Все категории</SelectItem>\n                  <SelectItem value=\"astana\">Астана</SelectItem>\n                  <SelectItem value=\"intercity\">Междугородний</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Link href=\"/create-request\">\n              <Button className=\"flex items-center space-x-2 bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105\">\n                <Plus className=\"w-5 h-5\" />\n                <span>Новая заявка</span>\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        {/* Recent Activity */}\n        <Card className=\"glass-card card-shadow\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Clock className=\"w-5 h-5\" />\n              <span>Последние действия</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3 p-3 bg-accent/50 rounded-lg\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Новая заявка AST-2025-001</p>\n                  <p className=\"text-xs text-muted-foreground\">2 часа назад</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-accent/50 rounded-lg\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Обновлен статус INT-2025-005</p>\n                  <p className=\"text-xs text-muted-foreground\">4 часа назад</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-accent/50 rounded-lg\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Назначен транспорт AST-2025-003</p>\n                  <p className=\"text-xs text-muted-foreground\">6 часов назад</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Performance Metrics */}\n        <Card className=\"glass-card card-shadow\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"w-5 h-5\" />\n              <span>Показатели эффективности</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Среднее время обработки</span>\n                <span className=\"text-sm font-bold text-primary\">2.4 часа</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Успешных доставок</span>\n                <span className=\"text-sm font-bold text-green-600\">98.5%</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Заявок сегодня</span>\n                <span className=\"text-sm font-bold text-blue-600\">12</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Активных водителей</span>\n                <span className=\"text-sm font-bold text-orange-600\">8</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Export Section */}\n      <Card className=\"glass-card card-shadow mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <ArrowDownToLine className=\"w-5 h-5\" />\n            <span>Быстрый экспорт</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n              <FileText className=\"w-4 h-4\" />\n              <span>Заявки за день</span>\n            </Button>\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n              <FileSpreadsheet className=\"w-4 h-4\" />\n              <span>Отчет по водителям</span>\n            </Button>\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-4 h-4\" />\n              <span>Статистика месяца</span>\n            </Button>\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>Планировщик</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notifications and Alerts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n        <div className=\"lg:col-span-2\">\n          <Card className=\"glass-card card-shadow\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bell className=\"w-5 h-5\" />\n                <span>Важные уведомления</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                  <AlertTriangle className=\"w-5 h-5 text-red-500 mt-0.5\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-red-800\">Срочная заявка требует внимания</p>\n                    <p className=\"text-xs text-red-600\">AST-2025-007 - клиент ждет уже 3 часа</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <Clock className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-yellow-800\">ТС требует техосмотра</p>\n                    <p className=\"text-xs text-yellow-600\">789 GHI 02 - плановое ТО через 3 дня</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <CheckCircle className=\"w-5 h-5 text-blue-500 mt-0.5\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-blue-800\">Новый водитель добавлен</p>\n                    <p className=\"text-xs text-blue-600\">Успешно прошел все проверки</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Stats Summary */}\n        <div>\n          <Card className=\"glass-card card-shadow\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Target className=\"w-5 h-5\" />\n                <span>Цели месяца</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Обработано заявок</span>\n                    <span>245/300</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-primary h-2 rounded-full\" style={{ width: '82%' }}></div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Успешных доставок</span>\n                    <span>98.5%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '98%' }}></div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Время обработки</span>\n                    <span>2.4ч / 3ч</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '80%' }}></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Requests Table */}\n      <Card className=\"glass-card card-shadow overflow-hidden\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Package className=\"w-5 h-5\" />\n            <span>Заявки на доставку</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>№ Заявки</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Категория</TableHead>\n                  <TableHead>Груз</TableHead>\n                  <TableHead>Маршрут</TableHead>\n                  <TableHead>Дата создания</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {requestsLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      Загрузка...\n                    </TableCell>\n                  </TableRow>\n                ) : requestsData?.requests?.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      Заявки не найдены\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  requestsData?.requests?.map((request: any) => (\n                    <TableRow \n                      key={request.id} \n                      className=\"cursor-pointer hover:bg-gray-50\"\n                    >\n                      <TableCell>\n                        <Link href={`/request/${request.id}`}>\n                          <span className=\"text-primary font-medium hover:underline\">\n                            {request.requestNumber}\n                          </span>\n                        </Link>\n                      </TableCell>\n                      <TableCell>\n                        <StatusChip status={request.status} />\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"secondary\">\n                          {request.category === 'astana' ? 'Астана' : 'Междугородний'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{request.cargoName}</TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium text-gray-900 truncate max-w-48\">\n                            {request.loadingAddress}\n                          </div>\n                          <div className=\"text-gray-500 truncate max-w-48\">\n                            → {request.unloadingAddress}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-gray-500\">\n                        {new Date(request.createdAt).toLocaleDateString('ru-RU', {\n                          day: '2-digit',\n                          month: '2-digit', \n                          year: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit'\n                        })}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          {requestsData?.total > 0 && (\n            <div className=\"flex items-center justify-between px-6 py-4 border-t\">\n              <div className=\"text-sm text-gray-500\">\n                Показано {((filters.page - 1) * filters.limit) + 1}-\n                {Math.min(filters.page * filters.limit, requestsData.total)} из {requestsData.total} заявок\n              </div>\n              <div className=\"flex space-x-1\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  disabled={filters.page === 1}\n                  onClick={() => handleFilterChange('page', (filters.page - 1).toString())}\n                >\n                  Предыдущая\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  disabled={filters.page * filters.limit >= requestsData.total}\n                  onClick={() => handleFilterChange('page', (filters.page + 1).toString())}\n                >\n                  Следующая\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </Layout>\n  );\n}\n","size_bytes":21389},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { \n  Truck, \n  Package, \n  MapPin, \n  Navigation, \n  Search,\n  Phone,\n  Mail,\n  Clock,\n  ShieldCheck\n} from \"lucide-react\";\nimport logoPath from \"@assets/1571623_1754368340277.png\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Home() {\n  const [trackingId, setTrackingId] = useState(\"\");\n\n  const handleTrackOrder = () => {\n    if (trackingId.trim()) {\n      window.location.href = `/track/${trackingId.trim()}`;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-border sticky top-0 z-50 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-3 sm:py-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-2\">\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <div className=\"w-12 h-8 sm:w-16 sm:h-10 bg-white border border-gray-200 rounded flex items-center justify-center p-1\">\n                <img \n                  src={logoPath} \n                  alt=\"ХРОМ-KZ\" \n                  className=\"w-full h-full object-contain\"\n                />\n              </div>\n              <div>\n                <h1 className=\"text-lg sm:text-xl lg:text-2xl font-bold text-foreground\">ХРОМ-KZ</h1>\n                <p className=\"text-xs sm:text-sm text-muted-foreground hidden sm:block\">Система управления логистикой</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <Badge variant=\"secondary\" className=\"bg-green-50 text-green-700 border-green-200 text-xs sm:text-sm hidden sm:flex\">\n                <ShieldCheck className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                Прием заявок 24/7\n              </Badge>\n              <Link href=\"/login\">\n                <Button size=\"sm\" className=\"bg-primary hover:bg-primary/90 text-primary-foreground text-xs sm:text-sm\">\n                  Вход в систему\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-8 sm:py-12 lg:py-16\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 text-center\">\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl xl:text-5xl font-bold text-foreground mb-4 sm:mb-6 leading-tight\">\n            Система управления логистическими заявками\n          </h2>\n          <p className=\"text-base sm:text-lg lg:text-xl text-muted-foreground mb-8 sm:mb-12 max-w-3xl mx-auto px-2\">\n            Корпоративная система ХРОМ-KZ для управления заявками на логистические услуги. \n            Создавайте заявки, отслеживайте статусы и управляйте процессом доставки.\n          </p>\n          \n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6 max-w-3xl mx-auto mb-8 sm:mb-12\">\n            <div className=\"professional-card p-4 sm:p-6 text-center hover-lift card-shadow\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Package className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-lg sm:text-xl font-semibold text-foreground mb-1 sm:mb-2\">1000+</h3>\n              <p className=\"text-muted-foreground text-xs sm:text-sm\">Заявок обработано</p>\n            </div>\n            <div className=\"professional-card p-4 sm:p-6 text-center hover-lift card-shadow\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Clock className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-lg sm:text-xl font-semibold text-foreground mb-1 sm:mb-2\">24/7</h3>\n              <p className=\"text-muted-foreground text-xs sm:text-sm\">Прием заявок</p>\n            </div>\n            <div className=\"professional-card p-4 sm:p-6 text-center hover-lift card-shadow\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <MapPin className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-lg sm:text-xl font-semibold text-foreground mb-1 sm:mb-2\">50+</h3>\n              <p className=\"text-muted-foreground text-xs sm:text-sm\">Городов покрытия</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Action Cards */}\n      <section className=\"pb-8 sm:pb-12 lg:pb-16\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-6\">\n            \n            {/* Астана заказ */}\n            <Card className=\"professional-card hover-lift card-shadow-lg\">\n              <CardHeader className=\"text-center pb-3 sm:pb-4\">\n                <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-green-600 rounded-xl flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                  <MapPin className=\"w-6 h-6 sm:w-8 sm:h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-lg sm:text-xl font-semibold text-foreground\">\n                  Доставка по Астане\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center px-3 sm:px-6\">\n                <p className=\"text-xs sm:text-sm text-muted-foreground mb-4 sm:mb-6\">\n                  Создание заявок на доставку грузов в пределах города Астана. \n                  Управление местными логистическими задачами.\n                </p>\n                <ul className=\"text-xs text-muted-foreground mb-4 sm:mb-6 space-y-1 sm:space-y-2 text-left\">\n                  <li>• Автоматическая нумерация заявок</li>\n                  <li>• Контроль статусов доставки</li>\n                  <li>• Управление контактами</li>\n                </ul>\n                <Link href=\"/create-order/astana\">\n                  <Button size=\"sm\" className=\"w-full bg-green-600 hover:bg-green-700 text-white text-xs py-2 px-3\">\n                    <Package className=\"w-3 h-3 mr-1\" />\n                    <span className=\"whitespace-nowrap\">Заявка Астана</span>\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Межгородской заказ */}\n            <Card className=\"professional-card hover-lift card-shadow-lg\">\n              <CardHeader className=\"text-center pb-3 sm:pb-4\">\n                <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-primary rounded-xl flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                  <Navigation className=\"w-6 h-6 sm:w-8 sm:h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-lg sm:text-xl font-semibold text-foreground\">\n                  Межгородские перевозки\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center px-3 sm:px-6\">\n                <p className=\"text-xs sm:text-sm text-muted-foreground mb-4 sm:mb-6\">\n                  Создание заявок на межгородские перевозки. \n                  Управление дальними логистическими маршрутами.\n                </p>\n                <ul className=\"text-xs text-muted-foreground mb-4 sm:mb-6 space-y-1 sm:space-y-2 text-left\">\n                  <li>• Маршруты по всему Казахстану</li>\n                  <li>• Контроль сроков доставки</li>\n                  <li>• Управление документооборотом</li>\n                </ul>\n                <Link href=\"/create-order/intercity\">\n                  <Button size=\"sm\" className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground text-xs py-2 px-3\">\n                    <Truck className=\"w-3 h-3 mr-1\" />\n                    <span className=\"whitespace-nowrap\">Межгород</span>\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Отслеживание заказа */}\n            <Card className=\"professional-card hover-lift card-shadow-lg\">\n              <CardHeader className=\"text-center pb-3 sm:pb-4\">\n                <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-orange-500 rounded-xl flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                  <Search className=\"w-6 h-6 sm:w-8 sm:h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-lg sm:text-xl font-semibold text-foreground\">\n                  Отслеживание заявки\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center px-3 sm:px-6\">\n                <p className=\"text-xs sm:text-sm text-muted-foreground mb-4 sm:mb-6\">\n                  Проверьте текущий статус заявки по номеру. \n                  Актуальная информация о ходе выполнения.\n                </p>\n                <div className=\"mb-3 sm:mb-4\">\n                  <Label htmlFor=\"tracking-id\" className=\"text-xs font-medium text-muted-foreground mb-2 block\">\n                    Номер заявки\n                  </Label>\n                  <Input\n                    id=\"tracking-id\"\n                    placeholder=\"AST-2025-001\"\n                    value={trackingId}\n                    onChange={(e) => setTrackingId(e.target.value)}\n                    className=\"h-8 sm:h-9 text-xs sm:text-sm\"\n                    onKeyPress={(e) => e.key === 'Enter' && handleTrackOrder()}\n                  />\n                </div>\n                <Button \n                  size=\"sm\" \n                  className=\"w-full bg-orange-500 hover:bg-orange-600 text-white text-xs py-2 px-3\"\n                  onClick={handleTrackOrder}\n                  disabled={!trackingId.trim()}\n                >\n                  <Search className=\"w-3 h-3 mr-1\" />\n                  <span className=\"whitespace-nowrap\">Отследить</span>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-8 sm:py-12 lg:py-16 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n          <div className=\"text-center mb-8 sm:mb-12\">\n            <h3 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-3 sm:mb-4\">\n              Возможности системы ХРОМ-KZ\n            </h3>\n            <p className=\"text-sm sm:text-base lg:text-lg text-muted-foreground px-2\">\n              Эффективное управление логистическими процессами компании\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8\">\n            <div className=\"text-center professional-card p-4 sm:p-6 hover-lift card-shadow\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Clock className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h4 className=\"text-base sm:text-lg font-semibold text-foreground mb-2\">Контроль сроков</h4>\n              <p className=\"text-xs sm:text-sm text-muted-foreground\">Автоматическое отслеживание и уведомления о статусах доставки</p>\n            </div>\n            \n            <div className=\"text-center professional-card p-4 sm:p-6 hover-lift card-shadow\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-600 rounded-lg flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <ShieldCheck className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h4 className=\"text-base sm:text-lg font-semibold text-foreground mb-2\">Учет и отчетность</h4>\n              <p className=\"text-xs sm:text-sm text-muted-foreground\">Полная история заявок и детальная аналитика работы</p>\n            </div>\n            \n            <div className=\"text-center professional-card p-4 sm:p-6 hover-lift card-shadow sm:col-span-2 lg:col-span-1\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-orange-500 rounded-lg flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Phone className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h4 className=\"text-base sm:text-lg font-semibold text-foreground mb-2\">Доступ персонала</h4>\n              <p className=\"text-xs sm:text-sm text-muted-foreground\">Ролевая система доступа для сотрудников и менеджеров</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-8 sm:py-12 lg:py-16\">\n        <div className=\"max-w-4xl mx-auto px-3 sm:px-4 lg:px-8\">\n          <Card className=\"professional-card card-shadow-lg text-center p-4 sm:p-6 lg:p-8\">\n            <h3 className=\"text-xl sm:text-2xl font-bold text-foreground mb-3 sm:mb-4\">\n              Техническая поддержка\n            </h3>\n            <p className=\"text-sm sm:text-base text-muted-foreground mb-6 sm:mb-8 px-2\">\n              Обращайтесь к IT-отделу ХРОМ-KZ за помощью по работе с системой\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-6 lg:space-x-8\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <Phone className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"text-xs text-muted-foreground\">Телефон</p>\n                  <p className=\"text-sm font-semibold text-foreground\">+7 (702) 997 00 94</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <Mail className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"text-xs text-muted-foreground\">Email</p>\n                  <p className=\"text-xs sm:text-sm font-semibold text-foreground break-all\">nurbek@creativegroup.kz</p>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":15841},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Truck, ArrowLeft } from \"lucide-react\";\nimport logoPath from \"@assets/1571623_1754368340277.png\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { auth } from \"@/lib/auth\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      console.log(\"Attempting login...\");\n      await auth.login(formData.username, formData.password);\n      console.log(\"Login successful, showing toast...\");\n      \n      toast({\n        title: \"Вход выполнен\",\n        description: \"Добро пожаловать в корпоративную систему\"\n      });\n      \n      console.log(\"Redirecting to dashboard...\");\n      // Force immediate redirect\n      setTimeout(() => {\n        window.location.href = \"/dashboard\";\n      }, 1000);\n      \n    } catch (error: any) {\n      toast({\n        title: \"Ошибка входа\",\n        description: \"Неверное имя пользователя или пароль\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-muted flex items-center justify-center py-6 px-3 sm:py-12 sm:px-4 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-6 sm:space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-24 h-16 sm:w-32 sm:h-20 bg-white border border-gray-200 rounded-lg flex items-center justify-center card-shadow-lg p-2 sm:p-3\">\n            <img \n              src={logoPath} \n              alt=\"ХРОМ-KZ\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <h2 className=\"mt-4 sm:mt-6 text-2xl sm:text-3xl font-bold text-foreground\">\n            ХРОМ-KZ\n          </h2>\n          <p className=\"mt-1 sm:mt-2 text-sm sm:text-base text-muted-foreground\">\n            Система управления логистикой\n          </p>\n        </div>\n\n        <Card className=\"professional-card card-shadow-lg\">\n          <CardHeader className=\"text-center pb-3 sm:pb-4 px-4 sm:px-6\">\n            <CardTitle className=\"text-xl sm:text-2xl font-semibold\">Вход в систему</CardTitle>\n            <CardDescription className=\"text-xs sm:text-sm mt-1\">\n              Введите учетные данные для доступа\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"px-4 sm:px-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-3 sm:space-y-4\">\n              <div className=\"space-y-1 sm:space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-xs sm:text-sm font-medium\">Имя пользователя</Label>\n                <Input\n                  id=\"username\"\n                  name=\"username\"\n                  type=\"text\"\n                  required\n                  value={formData.username}\n                  onChange={handleChange}\n                  placeholder=\"Введите имя пользователя\"\n                  className=\"h-9 sm:h-10 text-sm\"\n                />\n              </div>\n              <div className=\"space-y-1 sm:space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-xs sm:text-sm font-medium\">Пароль</Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  placeholder=\"Введите пароль\"\n                  className=\"h-9 sm:h-10 text-sm\"\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-medium text-sm py-2\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Вход...</span>\n                  </div>\n                ) : (\n                  \"Войти в систему\"\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Navigation Links */}\n        <div className=\"text-center space-y-3\">\n          <div className=\"text-sm text-muted-foreground\">\n            Нет аккаунта?{\" \"}\n            <Link href=\"/register\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n              Зарегистрироваться\n            </Link>\n          </div>\n          \n          <div className=\"pt-2\">\n            <Link href=\"/\" className=\"inline-flex items-center text-sm text-muted-foreground hover:text-foreground\">\n              <ArrowLeft className=\"w-4 h-4 mr-1\" />\n              Вернуться на главную\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5762},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/public-request.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { \n  Truck, \n  Package, \n  MapPin, \n  Navigation, \n  Clock,\n  Phone,\n  Mail,\n  CheckCircle\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { kazakhstanCities } from \"../../../shared/cities\";\n\nexport default function PublicRequest() {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [formData, setFormData] = useState({\n    category: \"astana\",\n    cargoName: \"\",\n    cargoWeightKg: \"\",\n    cargoVolumeM3: \"\",\n    cargoDimensions: \"\",\n\n    specialRequirements: \"\",\n    loadingCity: \"\",\n    loadingAddress: \"\",\n    loadingContactPerson: \"\",\n    loadingContactPhone: \"\",\n    unloadingCity: \"\",\n    unloadingAddress: \"\",\n    unloadingContactPerson: \"\",\n    unloadingContactPhone: \"\",\n    desiredShipmentDatetime: \"\",\n    notes: \"\",\n    clientName: \"\",\n    clientPhone: \"\",\n    clientEmail: \"\"\n  });\n  \n  const { toast } = useToast();\n\n  const submitRequestMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const processedData = {\n        ...data,\n        cargoWeightKg: data.cargoWeightKg ? parseFloat(data.cargoWeightKg) : null,\n        cargoVolumeM3: data.cargoVolumeM3 ? parseFloat(data.cargoVolumeM3) : null,\n\n        desiredShipmentDatetime: data.desiredShipmentDatetime ? new Date(data.desiredShipmentDatetime).toISOString() : null,\n        createdByUserId: 1 // Default system user for public requests\n      };\n      \n      const response = await fetch(\"/api/shipment-requests/public\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(processedData)\n      });\n      \n      if (!response.ok) throw new Error('Failed to submit request');\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      toast({\n        title: \"Заявка отправлена!\",\n        description: \"Мы свяжемся с вами в ближайшее время\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка отправки\",\n        description: \"Попробуйте еще раз или свяжитесь с нами по телефону\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitRequestMutation.mutate(formData);\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {/* Header */}\n        <header className=\"glass-card card-shadow\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center shadow-lg\">\n                <Truck className=\"w-7 h-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Хром Логистика</h1>\n                <p className=\"text-muted-foreground\">Надежные грузоперевозки</p>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Success Message */}\n        <div className=\"max-w-2xl mx-auto px-4 py-16\">\n          <Card className=\"glass-card card-shadow text-center\">\n            <CardContent className=\"p-12\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <CheckCircle className=\"w-10 h-10 text-white\" />\n              </div>\n              <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n                Заявка успешно отправлена!\n              </h2>\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                Спасибо за обращение! Наш менеджер свяжется с вами в течение 30 минут для уточнения деталей и расчета стоимости.\n              </p>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>📞 Телефон: +7 (717) 123-45-67</p>\n                <p>✉️ Email: info@chrome-logistics.kz</p>\n                <p>⏰ Работаем: пн-пт 9:00-18:00, сб 9:00-15:00</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"glass-card card-shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center shadow-lg\">\n                <Truck className=\"w-7 h-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Хром Логистика</h1>\n                <p className=\"text-muted-foreground\">Надежные грузоперевозки</p>\n              </div>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Phone className=\"w-4 h-4\" />\n                <span>+7 (717) 123-45-67</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Mail className=\"w-4 h-4\" />\n                <span>info@chrome-logistics.kz</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">\n            Оставьте заявку на грузоперевозку\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Быстро и безопасно доставим ваш груз по Астане и между городами Казахстана. \n            Заполните форму, и мы рассчитаем стоимость в течение 15 минут.\n          </p>\n        </div>\n\n        {/* Benefits */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"glass-card card-shadow hover-lift text-center\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">Быстрый расчет</h3>\n              <p className=\"text-sm text-muted-foreground\">Стоимость за 15 минут</p>\n            </CardContent>\n          </Card>\n          <Card className=\"glass-card card-shadow hover-lift text-center\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-green-400 to-green-600 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">Безопасность</h3>\n              <p className=\"text-sm text-muted-foreground\">Страхование груза</p>\n            </CardContent>\n          </Card>\n          <Card className=\"glass-card card-shadow hover-lift text-center\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                <Truck className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">Опыт</h3>\n              <p className=\"text-sm text-muted-foreground\">Более 10 лет на рынке</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Request Form */}\n        <Card className=\"glass-card card-shadow-lg max-w-4xl mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\">Форма заявки</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-8\">\n              {/* Client Information */}\n              <Card className=\"bg-accent/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Phone className=\"w-5 h-5 mr-2\" />\n                    Контактная информация\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"clientName\">ФИО *</Label>\n                      <Input\n                        id=\"clientName\"\n                        required\n                        value={formData.clientName}\n                        onChange={(e) => handleChange('clientName', e.target.value)}\n                        placeholder=\"Введите ваше ФИО\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"clientPhone\">Телефон *</Label>\n                      <Input\n                        id=\"clientPhone\"\n                        type=\"tel\"\n                        required\n                        value={formData.clientPhone}\n                        onChange={(e) => handleChange('clientPhone', e.target.value)}\n                        placeholder=\"+7 (___) ___-__-__\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"clientEmail\">Email</Label>\n                    <Input\n                      id=\"clientEmail\"\n                      type=\"email\"\n                      value={formData.clientEmail}\n                      onChange={(e) => handleChange('clientEmail', e.target.value)}\n                      placeholder=\"your@email.com\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Category Selection */}\n              <div>\n                <Label className=\"text-base font-medium\">Тип перевозки *</Label>\n                <RadioGroup\n                  value={formData.category}\n                  onValueChange={(value) => handleChange('category', value)}\n                  className=\"flex space-x-6 mt-3\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"astana\" id=\"astana\" />\n                    <Label htmlFor=\"astana\">По Астане</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"intercity\" id=\"intercity\" />\n                    <Label htmlFor=\"intercity\">Междугородняя</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Cargo Information */}\n              <Card className=\"bg-accent/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2\" />\n                    Информация о грузе\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"cargoName\">Наименование груза *</Label>\n                      <Input\n                        id=\"cargoName\"\n                        required\n                        value={formData.cargoName}\n                        onChange={(e) => handleChange('cargoName', e.target.value)}\n                        placeholder=\"Что перевозим?\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"cargoWeightKg\">Вес (кг)</Label>\n                      <Input\n                        id=\"cargoWeightKg\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={formData.cargoWeightKg}\n                        onChange={(e) => handleChange('cargoWeightKg', e.target.value)}\n                        placeholder=\"Примерный вес\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"cargoVolumeM3\">Объем (м³)</Label>\n                      <Input\n                        id=\"cargoVolumeM3\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={formData.cargoVolumeM3}\n                        onChange={(e) => handleChange('cargoVolumeM3', e.target.value)}\n                        placeholder=\"Примерный объем\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cargoDimensions\">Габариты (ДхШхВ)</Label>\n                    <Input\n                      id=\"cargoDimensions\"\n                      value={formData.cargoDimensions}\n                      onChange={(e) => handleChange('cargoDimensions', e.target.value)}\n                      placeholder=\"Например: 120x80x60 см\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Addresses */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Loading Address */}\n                <Card className=\"bg-accent/30\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <MapPin className=\"w-5 h-5 mr-2\" />\n                      Откуда забрать\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {formData.category === \"intercity\" && (\n                      <div>\n                        <Label htmlFor=\"loadingCity\">Город отправления *</Label>\n                        <Select\n                          value={formData.loadingCity}\n                          onValueChange={(value) => handleChange('loadingCity', value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Выберите город отправления\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {kazakhstanCities.map((city) => (\n                              <SelectItem key={city} value={city}>\n                                {city}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                    <div>\n                      <Label htmlFor=\"loadingAddress\">Адрес *</Label>\n                      <Textarea\n                        id=\"loadingAddress\"\n                        required\n                        rows={2}\n                        value={formData.loadingAddress}\n                        onChange={(e) => handleChange('loadingAddress', e.target.value)}\n                        placeholder={formData.category === \"astana\" ? \"Полный адрес в Астане\" : \"Точный адрес в городе\"}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"loadingContactPerson\">Контактное лицо</Label>\n                      <Input\n                        id=\"loadingContactPerson\"\n                        value={formData.loadingContactPerson}\n                        onChange={(e) => handleChange('loadingContactPerson', e.target.value)}\n                        placeholder=\"ФИО\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"loadingContactPhone\">Телефон</Label>\n                      <Input\n                        id=\"loadingContactPhone\"\n                        type=\"tel\"\n                        value={formData.loadingContactPhone}\n                        onChange={(e) => handleChange('loadingContactPhone', e.target.value)}\n                        placeholder=\"+7 (___) ___-__-__\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Unloading Address */}\n                <Card className=\"bg-accent/30\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <Navigation className=\"w-5 h-5 mr-2\" />\n                      Куда доставить\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {formData.category === \"intercity\" && (\n                      <div>\n                        <Label htmlFor=\"unloadingCity\">Город назначения *</Label>\n                        <Select\n                          value={formData.unloadingCity}\n                          onValueChange={(value) => handleChange('unloadingCity', value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Выберите город назначения\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {kazakhstanCities.map((city) => (\n                              <SelectItem key={city} value={city}>\n                                {city}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                    <div>\n                      <Label htmlFor=\"unloadingAddress\">Адрес *</Label>\n                      <Textarea\n                        id=\"unloadingAddress\"\n                        required\n                        rows={2}\n                        value={formData.unloadingAddress}\n                        onChange={(e) => handleChange('unloadingAddress', e.target.value)}\n                        placeholder={formData.category === \"astana\" ? \"Полный адрес в Астане\" : \"Точный адрес в городе\"}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"unloadingContactPerson\">Контактное лицо</Label>\n                      <Input\n                        id=\"unloadingContactPerson\"\n                        value={formData.unloadingContactPerson}\n                        onChange={(e) => handleChange('unloadingContactPerson', e.target.value)}\n                        placeholder=\"ФИО\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"unloadingContactPhone\">Телефон</Label>\n                      <Input\n                        id=\"unloadingContactPhone\"\n                        type=\"tel\"\n                        value={formData.unloadingContactPhone}\n                        onChange={(e) => handleChange('unloadingContactPhone', e.target.value)}\n                        placeholder=\"+7 (___) ___-__-__\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Additional Info */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"desiredShipmentDatetime\">Желаемая дата и время</Label>\n                  <Input\n                    id=\"desiredShipmentDatetime\"\n                    type=\"datetime-local\"\n                    value={formData.desiredShipmentDatetime}\n                    onChange={(e) => handleChange('desiredShipmentDatetime', e.target.value)}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"notes\">Дополнительная информация</Label>\n                  <Textarea\n                    id=\"notes\"\n                    rows={3}\n                    value={formData.notes}\n                    onChange={(e) => handleChange('notes', e.target.value)}\n                    placeholder=\"Особые требования, пожелания по времени доставки и т.д.\"\n                  />\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"text-center pt-6\">\n                <Button\n                  type=\"submit\"\n                  size=\"lg\"\n                  disabled={submitRequestMutation.isPending}\n                  className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white font-semibold px-12 py-4 text-lg shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105\"\n                >\n                  {submitRequestMutation.isPending ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                      <span>Отправляем...</span>\n                    </div>\n                  ) : (\n                    \"Отправить заявку\"\n                  )}\n                </Button>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  Нажимая кнопку, вы соглашаетесь на обработку персональных данных\n                </p>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"glass-card mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center\">\n                  <Truck className=\"w-5 h-5 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-bold text-foreground\">Хром Логистика</h3>\n              </div>\n              <p className=\"text-muted-foreground text-sm\">\n                Надежный партнер в сфере грузоперевозок по Казахстану\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-3\">Контакты</h4>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>📞 +7 (717) 123-45-67</p>\n                <p>✉️ info@chrome-logistics.kz</p>\n                <p>📍 г. Астана, ул. Кенесары 42</p>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-3\">Режим работы</h4>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>Пн-Пт: 9:00 - 18:00</p>\n                <p>Суббота: 9:00 - 15:00</p>\n                <p>Воскресенье: выходной</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":24829},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { FileDown, TrendingUp, PieChart, BarChart3 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusChip } from \"@/components/status-chip\";\nimport { Layout } from \"@/components/layout\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Reports() {\n  const [period, setPeriod] = useState(\"month\");\n  const { toast } = useToast();\n\n  const getDateRange = () => {\n    const now = new Date();\n    let startDate: Date;\n    \n    switch (period) {\n      case \"week\":\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case \"month\":\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case \"quarter\":\n        const quarterStart = Math.floor(now.getMonth() / 3) * 3;\n        startDate = new Date(now.getFullYear(), quarterStart, 1);\n        break;\n      default:\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n    }\n    \n    return { startDate, endDate: now };\n  };\n\n  const { data: reportData, isLoading } = useQuery({\n    queryKey: ['/api/reports', period],\n    queryFn: async () => {\n      const { startDate, endDate } = getDateRange();\n      const params = new URLSearchParams({\n        startDate: startDate.toISOString(),\n        endDate: endDate.toISOString()\n      });\n      \n      const response = await fetch(`/api/reports?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch reports');\n      return response.json();\n    }\n  });\n\n  const handleExportExcel = async () => {\n    try {\n      const { startDate, endDate } = getDateRange();\n      const params = new URLSearchParams({\n        startDate: startDate.toISOString(),\n        endDate: endDate.toISOString()\n      });\n      \n      const response = await fetch(`/api/reports/export?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to export data');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `shipment-requests-report-${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Экспорт выполнен\",\n        description: \"Файл успешно скачан\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка экспорта\",\n        description: \"Не удалось экспортировать данные\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const getStatistics = () => {\n    if (!reportData) return { total: 0, delivered: 0, cancelled: 0, successRate: 0 };\n    \n    const total = reportData.length;\n    const delivered = reportData.filter((req: any) => req.status === 'delivered').length;\n    const cancelled = reportData.filter((req: any) => req.status === 'cancelled').length;\n    const successRate = total > 0 ? ((delivered / total) * 100).toFixed(1) : 0;\n    \n    return { total, delivered, cancelled, successRate };\n  };\n\n  const getCategoryStats = () => {\n    if (!reportData) return { astana: 0, intercity: 0 };\n    \n    const astana = reportData.filter((req: any) => req.category === 'astana').length;\n    const intercity = reportData.filter((req: any) => req.category === 'intercity').length;\n    \n    return { astana, intercity };\n  };\n\n  const getStatusStats = () => {\n    if (!reportData) return {};\n    \n    const statusCounts: Record<string, number> = {};\n    reportData.forEach((req: any) => {\n      statusCounts[req.status] = (statusCounts[req.status] || 0) + 1;\n    });\n    \n    return statusCounts;\n  };\n\n  const statistics = getStatistics();\n  const categoryStats = getCategoryStats();\n  const statusStats = getStatusStats();\n\n  return (\n    <Layout>\n      {/* Period Filter */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <h3 className=\"text-xl font-medium text-gray-900\">Отчеты и аналитика</h3>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Select value={period} onValueChange={setPeriod}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"week\">За неделю</SelectItem>\n                  <SelectItem value=\"month\">За месяц</SelectItem>\n                  <SelectItem value=\"quarter\">За квартал</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button onClick={handleExportExcel} className=\"flex items-center space-x-2\">\n                <FileDown className=\"w-4 h-4\" />\n                <span>Экспорт в Excel</span>\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics Widgets */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Статистика за период</span>\n              <TrendingUp className=\"w-5 h-5 text-primary\" />\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Всего заявок:</span>\n              <span className=\"font-medium\">{isLoading ? \"...\" : statistics.total}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Выполнено:</span>\n              <span className=\"font-medium text-green-600\">{isLoading ? \"...\" : statistics.delivered}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Отменено:</span>\n              <span className=\"font-medium text-red-600\">{isLoading ? \"...\" : statistics.cancelled}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Успешность:</span>\n              <span className=\"font-medium text-green-600\">{isLoading ? \"...\" : statistics.successRate}%</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>По категориям</span>\n              <PieChart className=\"w-5 h-5 text-secondary\" />\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-primary rounded-full mr-2\"></div>\n                <span className=\"text-gray-600\">Астана</span>\n              </div>\n              <span className=\"font-medium\">\n                {isLoading ? \"...\" : `${categoryStats.astana} (${statistics.total > 0 ? Math.round((categoryStats.astana / statistics.total) * 100) : 0}%)`}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-secondary rounded-full mr-2\"></div>\n                <span className=\"text-gray-600\">Междугородний</span>\n              </div>\n              <span className=\"font-medium\">\n                {isLoading ? \"...\" : `${categoryStats.intercity} (${statistics.total > 0 ? Math.round((categoryStats.intercity / statistics.total) * 100) : 0}%)`}\n              </span>\n            </div>\n            \n            {/* Simple progress bars */}\n            {!isLoading && statistics.total > 0 && (\n              <div className=\"pt-2 space-y-2\">\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-primary h-2 rounded-full\" \n                    style={{ width: `${(categoryStats.astana / statistics.total) * 100}%` }}\n                  ></div>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-secondary h-2 rounded-full\" \n                    style={{ width: `${(categoryStats.intercity / statistics.total) * 100}%` }}\n                  ></div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>По статусам</span>\n              <BarChart3 className=\"w-5 h-5 text-orange-600\" />\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-600\">Новые</span>\n              <Badge className=\"bg-blue-100 text-blue-800\">\n                {isLoading ? \"...\" : statusStats.new || 0}\n              </Badge>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-600\">В обработке</span>\n              <Badge className=\"bg-orange-100 text-orange-800\">\n                {isLoading ? \"...\" : statusStats.processing || 0}\n              </Badge>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-600\">В пути</span>\n              <Badge className=\"bg-red-100 text-red-800\">\n                {isLoading ? \"...\" : statusStats.transit || 0}\n              </Badge>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-600\">Доставлено</span>\n              <Badge className=\"bg-green-100 text-green-800\">\n                {isLoading ? \"...\" : statusStats.delivered || 0}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Data Table for Export */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Детальные данные за период</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>№ Заявки</TableHead>\n                  <TableHead>Категория</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Дата создания</TableHead>\n                  <TableHead>Дата обновления</TableHead>\n                  <TableHead>Груз</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      Загрузка...\n                    </TableCell>\n                  </TableRow>\n                ) : reportData?.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      Данных за выбранный период не найдено\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  reportData?.map((request: any) => (\n                    <TableRow key={request.id}>\n                      <TableCell className=\"font-medium text-primary\">\n                        {request.requestNumber}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"secondary\">\n                          {request.category === 'astana' ? 'Астана' : 'Междугородний'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <StatusChip status={request.status} />\n                      </TableCell>\n                      <TableCell className=\"text-gray-500\">\n                        {new Date(request.createdAt).toLocaleDateString('ru-RU')}\n                      </TableCell>\n                      <TableCell className=\"text-gray-500\">\n                        {request.updatedAt \n                          ? new Date(request.updatedAt).toLocaleDateString('ru-RU')\n                          : '-'\n                        }\n                      </TableCell>\n                      <TableCell className=\"max-w-48 truncate\">\n                        {request.cargoName}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </Layout>\n  );\n}\n","size_bytes":13504},"client/src/pages/request-details.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { \n  Package, \n  MapPin, \n  Navigation, \n  Truck, \n  Edit, \n  Clock,\n  CheckCircle2,\n  AlertCircle,\n  User\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { StatusChip } from \"@/components/status-chip\";\nimport { Layout } from \"@/components/layout\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function RequestDetails() {\n  const [match, params] = useRoute(\"/request/:id\");\n  const [isStatusDialogOpen, setIsStatusDialogOpen] = useState(false);\n  const [isTransportDialogOpen, setIsTransportDialogOpen] = useState(false);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [transportInfo, setTransportInfo] = useState({\n    driver_name: \"\",\n    driver_phone: \"\",\n    vehicle_model: \"\",\n    vehicle_plate: \"\"\n  });\n  \n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const requestId = params?.id;\n\n  const { data: request, isLoading } = useQuery({\n    queryKey: ['/api/shipment-requests', requestId],\n    queryFn: async () => {\n      const response = await fetch(`/api/shipment-requests/${requestId}`);\n      if (!response.ok) throw new Error('Failed to fetch request');\n      return response.json();\n    },\n    enabled: !!requestId\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ status }: { status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/shipment-requests/${requestId}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shipment-requests', requestId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/shipment-requests'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      toast({ title: \"Статус обновлен\", description: \"Статус заявки успешно изменен\" });\n      setIsStatusDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка обновления\",\n        description: error.message || \"Не удалось обновить статус\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateTransportMutation = useMutation({\n    mutationFn: async (transportData: typeof transportInfo) => {\n      const response = await apiRequest(\"PATCH\", `/api/shipment-requests/${requestId}`, {\n        transportInfo: transportData,\n        status: \"assigned\"\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shipment-requests', requestId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/shipment-requests'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      toast({ title: \"Транспорт назначен\", description: \"Информация о транспорте успешно добавлена\" });\n      setIsTransportDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка назначения транспорта\",\n        description: error.message || \"Не удалось назначить транспорт\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleStatusUpdate = () => {\n    if (newStatus) {\n      updateStatusMutation.mutate({ status: newStatus });\n    }\n  };\n\n  const handleTransportUpdate = () => {\n    updateTransportMutation.mutate(transportInfo);\n  };\n\n  if (!match) return null;\n\n  if (isLoading) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-64\">\n          <div className=\"text-center\">Загрузка...</div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!request) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-64\">\n          <div className=\"text-center\">Заявка не найдена</div>\n        </div>\n      </Layout>\n    );\n  }\n\n  const statusTimeline = [\n    { status: \"new\", label: \"Новая заявка\", icon: AlertCircle, active: true },\n    { status: \"processing\", label: \"В обработке\", icon: Clock, active: [\"processing\", \"assigned\", \"transit\", \"delivered\"].includes(request.status) },\n    { status: \"assigned\", label: \"Назначен транспорт\", icon: Truck, active: [\"assigned\", \"transit\", \"delivered\"].includes(request.status) },\n    { status: \"transit\", label: \"В пути\", icon: Truck, active: [\"transit\", \"delivered\"].includes(request.status) },\n    { status: \"delivered\", label: \"Доставлен\", icon: CheckCircle2, active: request.status === \"delivered\" }\n  ];\n\n  return (\n    <Layout>\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-xl font-medium text-gray-900\">\n                  Заявка {request.requestNumber}\n                </h3>\n                <p className=\"text-gray-500\">\n                  Создана {new Date(request.createdAt).toLocaleDateString('ru-RU', {\n                    day: '2-digit',\n                    month: '2-digit',\n                    year: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <StatusChip status={request.status} />\n                <Dialog open={isStatusDialogOpen} onOpenChange={setIsStatusDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Изменить статус\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Изменить статус заявки</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label>Новый статус</Label>\n                        <Select value={newStatus} onValueChange={setNewStatus}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Выберите статус\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"new\">Новая</SelectItem>\n                            <SelectItem value=\"processing\">В обработке</SelectItem>\n                            <SelectItem value=\"assigned\">Назначен транспорт</SelectItem>\n                            <SelectItem value=\"transit\">В пути</SelectItem>\n                            <SelectItem value=\"delivered\">Доставлен</SelectItem>\n                            <SelectItem value=\"cancelled\">Отменен</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button variant=\"outline\" onClick={() => setIsStatusDialogOpen(false)}>\n                          Отмена\n                        </Button>\n                        <Button \n                          onClick={handleStatusUpdate}\n                          disabled={!newStatus || updateStatusMutation.isPending}\n                        >\n                          Обновить\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Status Timeline */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Статус заявки</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative\">\n              <div className=\"absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200\"></div>\n              <div className=\"space-y-6\">\n                {statusTimeline.map((item, index) => (\n                  <div key={item.status} className=\"relative flex items-center\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-4 ${\n                      item.active \n                        ? item.status === request.status \n                          ? \"bg-primary text-white\" \n                          : \"bg-green-500 text-white\"\n                        : \"bg-gray-300 text-gray-500\"\n                    }`}>\n                      <item.icon className=\"w-4 h-4\" />\n                    </div>\n                    <div>\n                      <p className={`text-sm font-medium ${item.active ? \"text-gray-900\" : \"text-gray-500\"}`}>\n                        {item.label}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {item.active && request.updatedAt && item.status !== \"new\" \n                          ? new Date(request.updatedAt).toLocaleDateString('ru-RU', {\n                              day: '2-digit',\n                              month: '2-digit',\n                              year: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })\n                          : item.status === \"new\" \n                            ? new Date(request.createdAt).toLocaleDateString('ru-RU', {\n                                day: '2-digit',\n                                month: '2-digit',\n                                year: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              })\n                            : \"Ожидается\"\n                        }\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Cargo Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Package className=\"w-5 h-5 mr-2\" />\n                Информация о грузе\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <p className=\"text-sm text-gray-500\">Наименование</p>\n                <p className=\"font-medium\">{request.cargoName}</p>\n              </div>\n\n              {request.cargoWeightKg && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Вес</p>\n                  <p className=\"font-medium\">{request.cargoWeightKg} кг</p>\n                </div>\n              )}\n              {request.cargoVolumeM3 && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Объем</p>\n                  <p className=\"font-medium\">{request.cargoVolumeM3} м³</p>\n                </div>\n              )}\n              {request.cargoDimensions && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Габариты</p>\n                  <p className=\"font-medium\">{request.cargoDimensions}</p>\n                </div>\n              )}\n              {request.specialRequirements && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Особые требования</p>\n                  <p className=\"font-medium\">{request.specialRequirements}</p>\n                </div>\n              )}\n              \n              {request.cargoPhotos && request.cargoPhotos.length > 0 && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Фотографии груза</p>\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 mt-2\">\n                    {request.cargoPhotos.map((photo: string, index: number) => (\n                      <button\n                        key={index}\n                        onClick={() => window.open(photo, '_blank')}\n                        className=\"aspect-square rounded-lg overflow-hidden border border-border hover:opacity-75 transition-opacity\"\n                      >\n                        <img\n                          src={photo}\n                          alt={`Фото груза ${index + 1}`}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Transport Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Truck className=\"w-5 h-5 mr-2\" />\n                Информация о транспорте\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {request.transportInfo ? (\n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Водитель</p>\n                    <p className=\"font-medium\">{request.transportInfo.driver_name}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Телефон водителя</p>\n                    <p className=\"font-medium\">{request.transportInfo.driver_phone}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Модель транспорта</p>\n                    <p className=\"font-medium\">{request.transportInfo.vehicle_model}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Номер транспорта</p>\n                    <p className=\"font-medium\">{request.transportInfo.vehicle_plate}</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500 mb-4\">Транспорт не назначен</p>\n                  <Dialog open={isTransportDialogOpen} onOpenChange={setIsTransportDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button>Назначить транспорт</Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Назначить транспорт</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"driver_name\">ФИО водителя</Label>\n                          <Input\n                            id=\"driver_name\"\n                            value={transportInfo.driver_name}\n                            onChange={(e) => setTransportInfo(prev => ({ ...prev, driver_name: e.target.value }))}\n                            placeholder=\"Введите ФИО водителя\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"driver_phone\">Телефон водителя</Label>\n                          <Input\n                            id=\"driver_phone\"\n                            value={transportInfo.driver_phone}\n                            onChange={(e) => setTransportInfo(prev => ({ ...prev, driver_phone: e.target.value }))}\n                            placeholder=\"+7 (___) ___-__-__\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"vehicle_model\">Модель транспорта</Label>\n                          <Input\n                            id=\"vehicle_model\"\n                            value={transportInfo.vehicle_model}\n                            onChange={(e) => setTransportInfo(prev => ({ ...prev, vehicle_model: e.target.value }))}\n                            placeholder=\"Например: КамАЗ-65117\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"vehicle_plate\">Номер транспорта</Label>\n                          <Input\n                            id=\"vehicle_plate\"\n                            value={transportInfo.vehicle_plate}\n                            onChange={(e) => setTransportInfo(prev => ({ ...prev, vehicle_plate: e.target.value }))}\n                            placeholder=\"Например: А123БВ01\"\n                          />\n                        </div>\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button variant=\"outline\" onClick={() => setIsTransportDialogOpen(false)}>\n                            Отмена\n                          </Button>\n                          <Button \n                            onClick={handleTransportUpdate}\n                            disabled={updateTransportMutation.isPending}\n                          >\n                            Назначить\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Loading Address */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <MapPin className=\"w-5 h-5 mr-2\" />\n                Адрес погрузки\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <p className=\"text-sm text-gray-500\">Адрес</p>\n                <p className=\"font-medium\">{request.loadingAddress}</p>\n              </div>\n              {request.loadingContactPerson && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Контактное лицо</p>\n                  <p className=\"font-medium\">{request.loadingContactPerson}</p>\n                </div>\n              )}\n              {request.loadingContactPhone && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Телефон</p>\n                  <p className=\"font-medium\">{request.loadingContactPhone}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Unloading Address */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Navigation className=\"w-5 h-5 mr-2\" />\n                Адрес выгрузки\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <p className=\"text-sm text-gray-500\">Адрес</p>\n                <p className=\"font-medium\">{request.unloadingAddress}</p>\n              </div>\n              {request.unloadingContactPerson && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Контактное лицо</p>\n                  <p className=\"font-medium\">{request.unloadingContactPerson}</p>\n                </div>\n              )}\n              {request.unloadingContactPhone && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Телефон</p>\n                  <p className=\"font-medium\">{request.unloadingContactPhone}</p>\n                </div>\n              )}\n              {request.desiredShipmentDatetime && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Желаемое время</p>\n                  <p className=\"font-medium\">\n                    {new Date(request.desiredShipmentDatetime).toLocaleDateString('ru-RU', {\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                  </p>\n                </div>\n              )}\n              {request.notes && (\n                <div>\n                  <p className=\"text-sm text-gray-500\">Примечания</p>\n                  <p className=\"font-medium\">{request.notes}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":21413},"client/src/pages/track-order.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Truck, \n  Package, \n  MapPin, \n  Clock,\n  Phone,\n  Mail,\n  ArrowLeft,\n  Search,\n  CheckCircle,\n  AlertCircle,\n  XCircle\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusChip } from \"@/components/status-chip\";\n\nexport default function TrackOrder() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const [searchId, setSearchId] = useState(params.id || \"\");\n  const [currentRequestNumber, setCurrentRequestNumber] = useState(params.id || \"\");\n\n  const { data: shipmentRequest, isLoading, error } = useQuery({\n    queryKey: ['/api/shipment-requests', currentRequestNumber],\n    queryFn: async () => {\n      if (!currentRequestNumber) return null;\n      const response = await fetch(`/api/shipment-requests/public/${currentRequestNumber}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Заказ не найден');\n        }\n        throw new Error('Ошибка загрузки данных');\n      }\n      return response.json();\n    },\n    enabled: !!currentRequestNumber\n  });\n\n  const handleSearch = () => {\n    if (searchId.trim()) {\n      setCurrentRequestNumber(searchId.trim());\n      setLocation(`/track/${searchId.trim()}`);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'processing': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'assigned': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n      case 'transit': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n      case 'delivered': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'new': return 'Новая заявка';\n      case 'processing': return 'В обработке';\n      case 'assigned': return 'Назначен транспорт';\n      case 'transit': return 'В пути';\n      case 'delivered': return 'Доставлено';\n      case 'cancelled': return 'Отменено';\n      default: return status;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'cancelled': return <XCircle className=\"w-4 h-4\" />;\n      case 'transit': return <Truck className=\"w-4 h-4\" />;\n      default: return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Header */}\n      <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl flex items-center justify-center shadow-lg\">\n                <Truck className=\"w-7 h-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Хром Логистика</h1>\n                <p className=\"text-gray-600 dark:text-gray-300\">Отслеживание заказов</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" onClick={() => setLocation(\"/\")}>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                На главную\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation(\"/login\")}>\n                Админка\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        {/* Search Section */}\n        <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700 mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Search className=\"w-5 h-5 mr-2\" />\n              Отслеживание заказа\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"search-id\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Номер заказа\n                </Label>\n                <Input\n                  id=\"search-id\"\n                  placeholder=\"Например: AST-2024-001 или INT-2024-001\"\n                  value={searchId}\n                  onChange={(e) => setSearchId(e.target.value)}\n                  className=\"mt-1\"\n                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                />\n              </div>\n              <div className=\"flex items-end\">\n                <Button \n                  onClick={handleSearch}\n                  disabled={!searchId.trim()}\n                  className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Найти\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results Section */}\n        {isLoading && currentRequestNumber && (\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700\">\n            <CardContent className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                <p className=\"text-gray-600 dark:text-gray-300\">Поиск заказа...</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {error && (\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-red-200 dark:border-red-700\">\n            <CardContent className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <AlertCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  Заказ не найден\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Проверьте правильность номера заказа или свяжитесь с нами для уточнения.\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center text-sm\">\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-300\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    +7 (777) 123-45-67\n                  </div>\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-300\">\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                    info@chromlogistics.kz\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {shipmentRequest && (\n          <div className=\"space-y-6\">\n            {/* Order Status */}\n            <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2\" />\n                    Заказ {shipmentRequest.requestNumber}\n                  </CardTitle>\n                  <Badge className={getStatusColor(shipmentRequest.status)}>\n                    {getStatusIcon(shipmentRequest.status)}\n                    <span className=\"ml-1\">{getStatusText(shipmentRequest.status)}</span>\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white mb-2\">Информация о грузе</h4>\n                    <div className=\"space-y-1 text-sm\">\n                      <p><span className=\"text-gray-500\">Наименование:</span> {shipmentRequest.cargoName}</p>\n                      {shipmentRequest.cargoWeightKg && (\n                        <p><span className=\"text-gray-500\">Вес:</span> {shipmentRequest.cargoWeightKg} кг</p>\n                      )}\n\n                      {shipmentRequest.cargoDimensions && (\n                        <p><span className=\"text-gray-500\">Габариты:</span> {shipmentRequest.cargoDimensions}</p>\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white mb-2\">Маршрут</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-3 h-3 bg-green-500 rounded-full mt-1 flex-shrink-0\"></div>\n                        <div>\n                          <p className=\"text-gray-500\">Откуда:</p>\n                          <p className=\"font-medium\">{shipmentRequest.loadingAddress}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-3 h-3 bg-red-500 rounded-full mt-1 flex-shrink-0\"></div>\n                        <div>\n                          <p className=\"text-gray-500\">Куда:</p>\n                          <p className=\"font-medium\">{shipmentRequest.unloadingAddress}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {shipmentRequest.transportInfo && (\n                  <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white mb-2\">Информация о транспорте</h4>\n                    <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                      {shipmentRequest.transportInfo.driver_name && (\n                        <p><span className=\"text-gray-500\">Водитель:</span> {shipmentRequest.transportInfo.driver_name}</p>\n                      )}\n                      {shipmentRequest.transportInfo.driver_phone && (\n                        <p><span className=\"text-gray-500\">Телефон водителя:</span> {shipmentRequest.transportInfo.driver_phone}</p>\n                      )}\n                      {shipmentRequest.transportInfo.vehicle_model && (\n                        <p><span className=\"text-gray-500\">Автомобиль:</span> {shipmentRequest.transportInfo.vehicle_model}</p>\n                      )}\n                      {shipmentRequest.transportInfo.vehicle_plate && (\n                        <p><span className=\"text-gray-500\">Гос. номер:</span> {shipmentRequest.transportInfo.vehicle_plate}</p>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <p><span className=\"text-gray-500\">Дата создания:</span> {new Date(shipmentRequest.createdAt).toLocaleString('ru-RU')}</p>\n                    {shipmentRequest.desiredShipmentDatetime && (\n                      <p><span className=\"text-gray-500\">Желаемая дата отгрузки:</span> {new Date(shipmentRequest.desiredShipmentDatetime).toLocaleString('ru-RU')}</p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Contact Information */}\n            <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Есть вопросы?\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Если у вас есть вопросы по заказу, свяжитесь с нами любым удобным способом:\n                </p>\n                <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-8\">\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-300\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    <span>+7 (777) 123-45-67</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-300\">\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                    <span>info@chromlogistics.kz</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14350},"client/src/pages/transport-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { \n  Truck, \n  Users, \n  Plus, \n  Edit, \n  Trash2, \n  Phone,\n  MapPin,\n  Calendar,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Layout } from \"@/components/layout\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function TransportManagement() {\n  const [isAddDriverOpen, setIsAddDriverOpen] = useState(false);\n  const [isAddVehicleOpen, setIsAddVehicleOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Mock data for demonstration\n  const vehicles = [\n    {\n      id: 1,\n      plateNumber: \"123 ABC 02\",\n      model: \"МАЗ-6312\",\n      capacity: \"20 тонн\",\n      status: \"available\",\n      driver: \"Иванов И.И.\",\n      lastService: \"2025-01-15\"\n    },\n    {\n      id: 2,\n      plateNumber: \"456 DEF 02\", \n      model: \"КамАЗ-65115\",\n      capacity: \"15 тонн\",\n      status: \"in_transit\",\n      driver: \"Петров П.П.\",\n      lastService: \"2025-01-10\"\n    },\n    {\n      id: 3,\n      plateNumber: \"789 GHI 02\",\n      model: \"Газель Next\",\n      capacity: \"3 тонны\",\n      status: \"maintenance\",\n      driver: \"-\",\n      lastService: \"2025-01-20\"\n    }\n  ];\n\n  const drivers = [\n    {\n      id: 1,\n      name: \"Иванов Иван Иванович\",\n      phone: \"+7 777 123 4567\",\n      license: \"В, С, D\",\n      experience: \"8 лет\",\n      status: \"active\",\n      currentVehicle: \"123 ABC 02\"\n    },\n    {\n      id: 2,\n      name: \"Петров Петр Петрович\", \n      phone: \"+7 777 234 5678\",\n      license: \"В, С\",\n      experience: \"5 лет\",\n      status: \"active\",\n      currentVehicle: \"456 DEF 02\"\n    },\n    {\n      id: 3,\n      name: \"Сидоров Сидор Сидорович\",\n      phone: \"+7 777 345 6789\", \n      license: \"В, С, D\",\n      experience: \"12 лет\",\n      status: \"off_duty\",\n      currentVehicle: \"-\"\n    }\n  ];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"available\":\n        return <Badge className=\"bg-green-100 text-green-800\">Доступен</Badge>;\n      case \"in_transit\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">В пути</Badge>;\n      case \"maintenance\":\n        return <Badge className=\"bg-red-100 text-red-800\">ТО</Badge>;\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\">Активен</Badge>;\n      case \"off_duty\":\n        return <Badge className=\"bg-gray-100 text-gray-800\">Не на смене</Badge>;\n      default:\n        return <Badge>Неизвестен</Badge>;\n    }\n  };\n\n  return (\n    <Layout>\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Управление транспортом</h1>\n          <p className=\"text-muted-foreground\">Контроль автопарка и водителей</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Dialog open={isAddVehicleOpen} onOpenChange={setIsAddVehicleOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Truck className=\"w-4 h-4 mr-2\" />\n                Добавить ТС\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Добавить транспортное средство</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"plateNumber\">Госномер</Label>\n                  <Input id=\"plateNumber\" placeholder=\"123 ABC 02\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"model\">Модель</Label>\n                  <Input id=\"model\" placeholder=\"КамАЗ-65115\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"capacity\">Грузоподъемность</Label>\n                  <Input id=\"capacity\" placeholder=\"15 тонн\" />\n                </div>\n                <Button className=\"w-full\">Добавить</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={isAddDriverOpen} onOpenChange={setIsAddDriverOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Добавить водителя\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Добавить водителя</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"driverName\">ФИО</Label>\n                  <Input id=\"driverName\" placeholder=\"Иванов Иван Иванович\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Телефон</Label>\n                  <Input id=\"phone\" placeholder=\"+7 777 123 4567\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"license\">Категории прав</Label>\n                  <Input id=\"license\" placeholder=\"В, С, D\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"experience\">Стаж вождения</Label>\n                  <Input id=\"experience\" placeholder=\"5 лет\" />\n                </div>\n                <Button className=\"w-full\">Добавить</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n        <Card className=\"glass-card card-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Truck className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Всего ТС</p>\n                <p className=\"text-2xl font-bold\">{vehicles.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card card-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Доступно</p>\n                <p className=\"text-2xl font-bold\">\n                  {vehicles.filter(v => v.status === \"available\").length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card card-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-orange-100 rounded-lg\">\n                <Users className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Водители</p>\n                <p className=\"text-2xl font-bold\">{drivers.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card card-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-red-100 rounded-lg\">\n                <XCircle className=\"w-6 h-6 text-red-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">На ТО</p>\n                <p className=\"text-2xl font-bold\">\n                  {vehicles.filter(v => v.status === \"maintenance\").length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Vehicles Table */}\n      <Card className=\"glass-card card-shadow mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Truck className=\"w-5 h-5\" />\n            <span>Транспортные средства</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Госномер</TableHead>\n                <TableHead>Модель</TableHead>\n                <TableHead>Грузоподъемность</TableHead>\n                <TableHead>Статус</TableHead>\n                <TableHead>Водитель</TableHead>\n                <TableHead>Последнее ТО</TableHead>\n                <TableHead>Действия</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {vehicles.map((vehicle) => (\n                <TableRow key={vehicle.id}>\n                  <TableCell className=\"font-medium\">{vehicle.plateNumber}</TableCell>\n                  <TableCell>{vehicle.model}</TableCell>\n                  <TableCell>{vehicle.capacity}</TableCell>\n                  <TableCell>{getStatusBadge(vehicle.status)}</TableCell>\n                  <TableCell>{vehicle.driver}</TableCell>\n                  <TableCell>{vehicle.lastService}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Drivers Table */}\n      <Card className=\"glass-card card-shadow\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"w-5 h-5\" />\n            <span>Водители</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>ФИО</TableHead>\n                <TableHead>Телефон</TableHead>\n                <TableHead>Категории прав</TableHead>\n                <TableHead>Стаж</TableHead>\n                <TableHead>Статус</TableHead>\n                <TableHead>Текущее ТС</TableHead>\n                <TableHead>Действия</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {drivers.map((driver) => (\n                <TableRow key={driver.id}>\n                  <TableCell className=\"font-medium\">{driver.name}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                      <span>{driver.phone}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>{driver.license}</TableCell>\n                  <TableCell>{driver.experience}</TableCell>\n                  <TableCell>{getStatusBadge(driver.status)}</TableCell>\n                  <TableCell>{driver.currentVehicle}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </Layout>\n  );\n}","size_bytes":12913},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"client/src/components/photo-upload.tsx":{"content":"import { useState } from \"react\";\nimport { Upload, X, Image as ImageIcon, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface PhotoUploadProps {\n  photos: string[];\n  onPhotosChange: (photos: string[]) => void;\n  maxPhotos?: number;\n  disabled?: boolean;\n}\n\nexport function PhotoUpload({ photos, onPhotosChange, maxPhotos = 5, disabled = false }: PhotoUploadProps) {\n  const [uploading, setUploading] = useState(false);\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length === 0) return;\n\n    // Check if adding these files would exceed the limit\n    if (photos.length + files.length > maxPhotos) {\n      alert(`Максимум ${maxPhotos} фотографий`);\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const newPhotos: string[] = [];\n      \n      for (const file of files) {\n        // Check file type\n        if (!file.type.startsWith('image/')) {\n          alert('Можно загружать только изображения');\n          continue;\n        }\n\n        // Check file size (max 2MB)\n        if (file.size > 2 * 1024 * 1024) {\n          alert('Размер файла не должен превышать 2MB');\n          continue;\n        }\n\n        // Compress and convert to base64\n        const compressedBase64 = await compressAndConvertToBase64(file);\n        newPhotos.push(compressedBase64);\n      }\n\n      onPhotosChange([...photos, ...newPhotos]);\n    } catch (error) {\n      console.error('Error uploading photos:', error);\n      alert('Ошибка загрузки фотографий');\n    } finally {\n      setUploading(false);\n      // Reset input\n      event.target.value = '';\n    }\n  };\n\n  const removePhoto = (index: number) => {\n    const newPhotos = photos.filter((_, i) => i !== index);\n    onPhotosChange(newPhotos);\n  };\n\n  const compressAndConvertToBase64 = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      img.onload = () => {\n        // Calculate new dimensions (max 600px width/height for smaller files)\n        const maxSize = 600;\n        let { width, height } = img;\n        \n        if (width > height) {\n          if (width > maxSize) {\n            height = (height * maxSize) / width;\n            width = maxSize;\n          }\n        } else {\n          if (height > maxSize) {\n            width = (width * maxSize) / height;\n            height = maxSize;\n          }\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Draw and compress\n        ctx?.drawImage(img, 0, 0, width, height);\n        const compressedBase64 = canvas.toDataURL('image/jpeg', 0.5); // 50% quality for smaller size\n        resolve(compressedBase64);\n      };\n      \n      img.onerror = reject;\n      \n      // Load the image\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        img.src = e.target?.result as string;\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Upload Button */}\n      <div className=\"flex items-center gap-4\">\n        <label className={`inline-block ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}>\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            multiple\n            onChange={handleFileSelect}\n            disabled={disabled || uploading || photos.length >= maxPhotos}\n            className=\"sr-only\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            disabled={disabled || uploading || photos.length >= maxPhotos}\n            className=\"flex items-center space-x-2\"\n            asChild\n          >\n            <span>\n              {uploading ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                <Upload className=\"w-4 h-4\" />\n              )}\n              <span>\n                {uploading ? 'Загрузка...' : 'Добавить фото'}\n              </span>\n            </span>\n          </Button>\n        </label>\n        \n        <span className=\"text-sm text-muted-foreground\">\n          {photos.length}/{maxPhotos} фотографий\n        </span>\n      </div>\n\n      {/* Photo Grid */}\n      {photos.length > 0 && (\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n          {photos.map((photo, index) => (\n            <Card key={index} className=\"relative group overflow-hidden\">\n              <div className=\"aspect-square\">\n                <img\n                  src={photo}\n                  alt={`Фото груза ${index + 1}`}\n                  className=\"w-full h-full object-cover\"\n                />\n                {!disabled && (\n                  <button\n                    type=\"button\"\n                    onClick={() => removePhoto(index)}\n                    className=\"absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600\"\n                  >\n                    <X className=\"w-3 h-3\" />\n                  </button>\n                )}\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {photos.length === 0 && (\n        <Card className=\"border-dashed border-2 border-muted-foreground/25\">\n          <div className=\"p-8 text-center\">\n            <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground mb-2\">Фотографии груза не добавлены</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Добавьте фотографии для лучшего понимания груза\n            </p>\n          </div>\n        </Card>\n      )}\n\n      {/* Help Text */}\n      <p className=\"text-xs text-muted-foreground\">\n        Максимальный размер файла: 2MB. Фотографии автоматически сжимаются для оптимизации\n      </p>\n    </div>\n  );\n}","size_bytes":6389},"client/src/pages/calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar as CalendarIcon, Clock, MapPin, Package, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Layout } from \"@/components/layout\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, addMonths, subMonths, isToday, isFuture } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\n\ninterface ShipmentRequest {\n  id: number;\n  requestNumber: string;\n  category: string;\n  status: string;\n  cargoName: string;\n  loadingAddress: string;\n  unloadingAddress: string;\n  desiredShipmentDatetime: string;\n  createdAt: string;\n}\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n\n  // Получаем заявки с датами отгрузки в текущем месяце\n  const { data: shipments = [], isLoading } = useQuery({\n    queryKey: ['/api/shipment-requests', 'calendar', format(monthStart, 'yyyy-MM-dd'), format(monthEnd, 'yyyy-MM-dd')],\n    queryFn: async () => {\n      const response = await fetch(`/api/shipment-requests/calendar?start=${format(monthStart, 'yyyy-MM-dd')}&end=${format(monthEnd, 'yyyy-MM-dd')}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('auth_token')}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch calendar data');\n      return response.json();\n    }\n  });\n\n  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n  const getShipmentsForDate = (date: Date) => {\n    return shipments.filter((shipment: ShipmentRequest) => {\n      if (!shipment.desiredShipmentDatetime) return false;\n      return isSameDay(new Date(shipment.desiredShipmentDatetime), date);\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new': return 'bg-blue-500';\n      case 'processing': return 'bg-yellow-500';\n      case 'assigned': return 'bg-purple-500';\n      case 'transit': return 'bg-orange-500';\n      case 'delivered': return 'bg-green-500';\n      case 'cancelled': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'new': return 'Новая';\n      case 'processing': return 'Обработка';\n      case 'assigned': return 'Назначена';\n      case 'transit': return 'В пути';\n      case 'delivered': return 'Доставлена';\n      case 'cancelled': return 'Отменена';\n      default: return status;\n    }\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => direction === 'prev' ? subMonths(prev, 1) : addMonths(prev, 1));\n    setSelectedDate(null);\n  };\n\n  const selectedDateShipments = selectedDate ? getShipmentsForDate(selectedDate) : [];\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <CalendarIcon className=\"w-8 h-8 text-primary\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Календарь отгрузок</h1>\n              <p className=\"text-muted-foreground\">Планирование и отслеживание будущих отгрузок</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Calendar */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"professional-card card-shadow\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl\">\n                    {format(currentDate, 'LLLL yyyy', { locale: ru })}\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigateMonth('prev')}\n                    >\n                      <ChevronLeft className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentDate(new Date())}\n                    >\n                      Сегодня\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigateMonth('next')}\n                    >\n                      <ChevronRight className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"flex items-center justify-center h-64\">\n                    <div className=\"text-center\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                      <p className=\"text-muted-foreground\">Загрузка календаря...</p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-7 gap-2\">\n                    {/* Days of week header */}\n                    {['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'].map((day) => (\n                      <div key={day} className=\"p-2 text-center text-sm font-medium text-muted-foreground\">\n                        {day}\n                      </div>\n                    ))}\n                    \n                    {/* Calendar days */}\n                    {daysInMonth.map((day) => {\n                      const dayShipments = getShipmentsForDate(day);\n                      const isSelected = selectedDate && isSameDay(day, selectedDate);\n                      const isTodayDate = isToday(day);\n                      const isFutureDate = isFuture(day);\n                      \n                      return (\n                        <button\n                          key={day.toISOString()}\n                          onClick={() => setSelectedDate(day)}\n                          className={`\n                            relative p-2 min-h-[60px] rounded-lg border transition-all duration-200 hover:border-primary/50\n                            ${isSelected ? 'border-primary bg-primary/5' : 'border-border'}\n                            ${isTodayDate ? 'bg-primary/10' : ''}\n                            ${!isFutureDate && !isTodayDate ? 'opacity-50' : ''}\n                          `}\n                        >\n                          <div className=\"text-sm font-medium\">\n                            {format(day, 'd')}\n                          </div>\n                          \n                          {dayShipments.length > 0 && (\n                            <div className=\"absolute bottom-1 left-1 right-1 flex flex-wrap gap-1\">\n                              {dayShipments.slice(0, 2).map((shipment: ShipmentRequest) => (\n                                <div\n                                  key={shipment.id}\n                                  className={`w-2 h-2 rounded-full ${getStatusColor(shipment.status)}`}\n                                />\n                              ))}\n                              {dayShipments.length > 2 && (\n                                <div className=\"text-xs text-muted-foreground\">\n                                  +{dayShipments.length - 2}\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </button>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Selected Date Details */}\n          <div className=\"space-y-4\">\n            <Card className=\"professional-card card-shadow\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  {selectedDate ? format(selectedDate, 'd MMMM yyyy', { locale: ru }) : 'Выберите дату'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {selectedDate ? (\n                  selectedDateShipments.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {selectedDateShipments.map((shipment: ShipmentRequest) => (\n                        <div key={shipment.id} className=\"p-3 rounded-lg border border-border hover:border-primary/50 transition-colors\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge className={`${getStatusColor(shipment.status)} text-white`}>\n                                {getStatusText(shipment.status)}\n                              </Badge>\n                              <span className=\"text-sm font-medium\">{shipment.requestNumber}</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Package className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"truncate\">{shipment.cargoName}</span>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-2\">\n                              <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"truncate text-muted-foreground\">\n                                {shipment.loadingAddress}\n                              </span>\n                            </div>\n                            \n                            {shipment.desiredShipmentDatetime && (\n                              <div className=\"flex items-center space-x-2\">\n                                <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                                <span className=\"text-muted-foreground\">\n                                  {format(new Date(shipment.desiredShipmentDatetime), 'HH:mm')}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <CalendarIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-muted-foreground\">Нет запланированных отгрузок на эту дату</p>\n                    </div>\n                  )\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <CalendarIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-muted-foreground\">Выберите дату для просмотра отгрузок</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Statistics */}\n            <Card className=\"professional-card card-shadow\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Статистика месяца</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Всего отгрузок:</span>\n                    <span className=\"font-semibold\">{shipments.length}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Астана:</span>\n                    <span className=\"font-semibold\">\n                      {shipments.filter((s: ShipmentRequest) => s.category === 'astana').length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Межгород:</span>\n                    <span className=\"font-semibold\">\n                      {shipments.filter((s: ShipmentRequest) => s.category === 'intercity').length}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}","size_bytes":13198},"client/src/pages/requests-management.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Edit, \n  Eye, \n  Package, \n  MapPin, \n  Phone, \n  Clock, \n  Truck,\n  DollarSign,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\nimport { Layout } from \"@/components/layout\";\n\ninterface ShipmentRequest {\n  id: number;\n  requestNumber: string;\n  category: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n  cargoName: string;\n  cargoWeightKg: string | null;\n  cargoVolumeM3: string | null;\n  cargoDimensions: string | null;\n  specialRequirements: string | null;\n  loadingCity: string | null;\n  loadingAddress: string;\n  loadingContactPerson: string | null;\n  loadingContactPhone: string | null;\n  unloadingCity: string | null;\n  unloadingAddress: string;\n  unloadingContactPerson: string | null;\n  unloadingContactPhone: string | null;\n  desiredShipmentDatetime: string | null;\n  notes: string | null;\n  transportInfo: any;\n  priceKzt: string | null;\n  priceNotes: string | null;\n  cargoPhotos: string[];\n}\n\nconst statusLabels = {\n  new: \"Новая\",\n  processing: \"В обработке\", \n  assigned: \"Назначена\",\n  transit: \"В пути\",\n  delivered: \"Доставлена\",\n  cancelled: \"Отменена\"\n};\n\nconst statusColors = {\n  new: \"bg-blue-100 text-blue-800\",\n  processing: \"bg-yellow-100 text-yellow-800\",\n  assigned: \"bg-purple-100 text-purple-800\", \n  transit: \"bg-orange-100 text-orange-800\",\n  delivered: \"bg-green-100 text-green-800\",\n  cancelled: \"bg-red-100 text-red-800\"\n};\n\nexport default function RequestsManagement() {\n  const [selectedRequest, setSelectedRequest] = useState<ShipmentRequest | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [filters, setFilters] = useState({\n    status: \"all\",\n    category: \"all\", \n    search: \"\"\n  });\n  const [editData, setEditData] = useState({\n    status: \"\",\n    priceKzt: \"\",\n    priceNotes: \"\",\n    transportInfo: {\n      driverName: \"\",\n      driverPhone: \"\",\n      vehicleModel: \"\",\n      vehiclePlate: \"\"\n    }\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: requestsData, isLoading } = useQuery({\n    queryKey: (() => {\n      const params = new URLSearchParams();\n      if (filters.status && filters.status !== \"all\") params.append(\"status\", filters.status);\n      if (filters.category && filters.category !== \"all\") params.append(\"category\", filters.category);\n      if (filters.search) params.append(\"search\", filters.search);\n      const queryString = params.toString();\n      return queryString ? [\"/api/shipment-requests\", `?${queryString}`] : [\"/api/shipment-requests\"];\n    })()\n  });\n\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/shipment-requests/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shipment-requests\"] });\n      setIsEditDialogOpen(false);\n      toast({\n        title: \"Заявка обновлена\",\n        description: \"Изменения успешно сохранены\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить заявку\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Quick update functions\n  const handleQuickStatusUpdate = async (requestId: number, newStatus: string) => {\n    try {\n      await updateRequestMutation.mutateAsync({ id: requestId, data: { status: newStatus } });\n      toast({ \n        title: \"Статус обновлен\", \n        description: `Статус заявки изменен на \"${statusLabels[newStatus as keyof typeof statusLabels]}\"` \n      });\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка обновления статуса\",\n        description: error.message || \"Не удалось обновить статус\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleQuickPriceUpdate = (requestId: number, newPrice: string) => {\n    // This is just for UI updates, actual save happens on blur\n  };\n\n  const handleSavePrice = async (requestId: number, newPrice: string) => {\n    if (!newPrice.trim()) return;\n    \n    try {\n      await updateRequestMutation.mutateAsync({ \n        id: requestId, \n        data: { priceKzt: parseFloat(newPrice) || 0 } \n      });\n      toast({ \n        title: \"Цена обновлена\", \n        description: `Цена установлена: ${parseFloat(newPrice).toLocaleString()} ₸` \n      });\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка обновления цены\",\n        description: error.message || \"Не удалось обновить цену\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleEditRequest = (request: ShipmentRequest) => {\n    setSelectedRequest(request);  \n    setEditData({\n      status: request.status,\n      priceKzt: request.priceKzt || \"\",\n      priceNotes: request.priceNotes || \"\",\n      transportInfo: {\n        driverName: request.transportInfo?.driverName || \"\",\n        driverPhone: request.transportInfo?.driverPhone || \"\",\n        vehicleModel: request.transportInfo?.vehicleModel || \"\",\n        vehiclePlate: request.transportInfo?.vehiclePlate || \"\"\n      }\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSaveChanges = () => {\n    if (!selectedRequest) return;\n\n    const updateData = {\n      status: editData.status,\n      priceKzt: editData.priceKzt ? parseFloat(editData.priceKzt) : null,\n      priceNotes: editData.priceNotes || null,\n      transportInfo: {\n        driverName: editData.transportInfo.driverName || null,\n        driverPhone: editData.transportInfo.driverPhone || null,\n        vehicleModel: editData.transportInfo.vehicleModel || null,\n        vehiclePlate: editData.transportInfo.vehiclePlate || null\n      }\n    };\n\n    updateRequestMutation.mutate({ id: selectedRequest.id, data: updateData });\n  };\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Управление заявками\n          </h1>\n        </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Фильтры\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Поиск</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Номер заявки, груз...\"\n                  value={filters.search}\n                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"status\">Статус</Label>\n              <Select\n                value={filters.status}\n                onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Все статусы\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Все статусы</SelectItem>\n                  {Object.entries(statusLabels).map(([key, label]) => (\n                    <SelectItem key={key} value={key}>{label}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"category\">Категория</Label>\n              <Select\n                value={filters.category}\n                onValueChange={(value) => setFilters(prev => ({ ...prev, category: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Все категории\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Все категории</SelectItem>\n                  <SelectItem value=\"astana\">По Астане</SelectItem>\n                  <SelectItem value=\"intercity\">Межгородские</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setFilters({ status: \"all\", category: \"all\", search: \"\" })}\n              >\n                Сбросить\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Requests Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Заявки ({(requestsData as any)?.total || 0})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Загрузка...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Номер</TableHead>\n                    <TableHead>Информация о грузе</TableHead>\n                    <TableHead>Маршрут</TableHead>\n                    <TableHead>Контакты</TableHead>\n                    <TableHead>Статус</TableHead>\n                    <TableHead>Цена</TableHead>\n                    <TableHead>Действия</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {(requestsData as any)?.requests?.map((request: ShipmentRequest) => (\n                    <TableRow key={request.id}>\n                      <TableCell className=\"font-medium\">\n                        {request.requestNumber}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"space-y-2\">\n                          <div className=\"font-medium\">{request.cargoName}</div>\n                          \n                          <div className=\"text-sm text-gray-600 space-y-1\">\n                            {request.cargoWeightKg && (\n                              <div>Вес: {request.cargoWeightKg} кг</div>\n                            )}\n                            {request.cargoVolumeM3 && (\n                              <div>Объем: {request.cargoVolumeM3} м³</div>\n                            )}\n                            {request.cargoDimensions && (\n                              <div>Габариты: {request.cargoDimensions}</div>\n                            )}\n                            {request.specialRequirements && (\n                              <div className=\"text-orange-600 font-medium\">Особые требования: {request.specialRequirements}</div>\n                            )}\n                          </div>\n\n                          {request.cargoPhotos && request.cargoPhotos.length > 0 && (\n                            <div className=\"space-y-1\">\n                              <div className=\"text-xs text-blue-600 font-medium\">\n                                Фотографии груза ({request.cargoPhotos.length})\n                              </div>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {request.cargoPhotos.slice(0, 3).map((photo: string, index: number) => (\n                                  <button\n                                    key={index}\n                                    onClick={() => window.open(photo, '_blank')}\n                                    className=\"w-12 h-12 rounded border overflow-hidden hover:opacity-75 transition-opacity\"\n                                  >\n                                    <img\n                                      src={photo}\n                                      alt={`Фото ${index + 1}`}\n                                      className=\"w-full h-full object-cover\"\n                                    />\n                                  </button>\n                                ))}\n                                {request.cargoPhotos.length > 3 && (\n                                  <div className=\"w-12 h-12 rounded border bg-gray-100 flex items-center justify-center text-xs text-gray-500\">\n                                    +{request.cargoPhotos.length - 3}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          )}\n\n                          {request.desiredShipmentDatetime && (\n                            <div className=\"text-xs text-purple-600\">\n                              Желаемая дата: {format(new Date(request.desiredShipmentDatetime), \"dd.MM.yyyy HH:mm\", { locale: ru })}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"text-sm space-y-2\">\n                          <div className=\"space-y-1\">\n                            <div className=\"font-medium text-green-700\">Загрузка:</div>\n                            {request.loadingCity && <div className=\"text-xs\">{request.loadingCity}</div>}\n                            <div>{request.loadingAddress}</div>\n                          </div>\n                          <div className=\"space-y-1\">\n                            <div className=\"font-medium text-red-700\">Выгрузка:</div>\n                            {request.unloadingCity && <div className=\"text-xs\">{request.unloadingCity}</div>}\n                            <div>{request.unloadingAddress}</div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"text-xs space-y-2\">\n                          {request.loadingContactPerson && (\n                            <div>\n                              <div className=\"font-medium\">Отправитель:</div>\n                              <div>{request.loadingContactPerson}</div>\n                              {request.loadingContactPhone && <div>Тел: {request.loadingContactPhone}</div>}\n                            </div>\n                          )}\n                          {request.unloadingContactPerson && (\n                            <div>\n                              <div className=\"font-medium\">Получатель:</div>\n                              <div>{request.unloadingContactPerson}</div>\n                              {request.unloadingContactPhone && <div>Тел: {request.unloadingContactPhone}</div>}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-2\">\n                          <Select\n                            value={request.status}\n                            onValueChange={(newStatus) => handleQuickStatusUpdate(request.id, newStatus)}\n                          >\n                            <SelectTrigger className=\"h-8 w-full\">\n                              <SelectValue>\n                                <Badge className={statusColors[request.status as keyof typeof statusColors]}>\n                                  {statusLabels[request.status as keyof typeof statusLabels]}\n                                </Badge>\n                              </SelectValue>\n                            </SelectTrigger>\n                            <SelectContent>\n                              {Object.entries(statusLabels).map(([key, label]) => (\n                                <SelectItem key={key} value={key}>{label}</SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <div className=\"text-xs text-gray-500\">\n                            Создано: {format(new Date(request.createdAt), \"dd.MM.yyyy HH:mm\", { locale: ru })}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Input\n                              type=\"number\"\n                              placeholder=\"Цена\"\n                              value={request.priceKzt || \"\"}\n                              onChange={(e) => handleQuickPriceUpdate(request.id, e.target.value)}\n                              onBlur={(e) => handleSavePrice(request.id, e.target.value)}\n                              className=\"h-8 w-24 text-sm\"\n                            />\n                            <span className=\"text-sm\">₸</span>\n                          </div>\n                          {request.priceNotes && (\n                            <div className=\"text-xs text-gray-500 max-w-32 truncate\" title={request.priceNotes}>\n                              Примечание: {request.priceNotes}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col space-y-1\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditRequest(request)}\n                            className=\"h-8 px-2 text-xs\"\n                          >\n                            <Edit className=\"w-3 h-3 mr-1\" />\n                            Детали\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => window.open(`/request/${request.id}`, '_blank')}\n                            className=\"h-8 px-2 text-xs\"\n                          >\n                            <Eye className=\"w-3 h-3 mr-1\" />\n                            Открыть\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-screen overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Редактирование заявки {selectedRequest?.requestNumber}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedRequest && (\n            <div className=\"space-y-6\">\n              {/* Request Info */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-lg\">\n                    <Package className=\"w-5 h-5 mr-2\" />\n                    Информация о заявке\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <span className=\"font-medium\">Груз:</span> {selectedRequest.cargoName}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Категория:</span>{\" \"}\n                      {selectedRequest.category === \"astana\" ? \"По Астане\" : \"Межгородская\"}\n                    </div>\n                  </div>\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <span className=\"font-medium\">Адрес загрузки:</span> {selectedRequest.loadingAddress}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Адрес выгрузки:</span> {selectedRequest.unloadingAddress}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Status */}\n              <div>\n                <Label htmlFor=\"status\">Статус заявки</Label>\n                <Select\n                  value={editData.status}\n                  onValueChange={(value) => setEditData(prev => ({ ...prev, status: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(statusLabels).map(([key, label]) => (\n                      <SelectItem key={key} value={key}>{label}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Pricing */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-lg\">\n                    <DollarSign className=\"w-5 h-5 mr-2\" />\n                    Стоимость перевозки\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"priceKzt\">Цена (₸)</Label>\n                      <Input\n                        id=\"priceKzt\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editData.priceKzt}\n                        onChange={(e) => setEditData(prev => ({ ...prev, priceKzt: e.target.value }))}\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"priceNotes\">Примечания к цене</Label>\n                    <Textarea\n                      id=\"priceNotes\"\n                      value={editData.priceNotes}\n                      onChange={(e) => setEditData(prev => ({ ...prev, priceNotes: e.target.value }))}\n                      placeholder=\"Дополнительные условия, скидки, надбавки...\"\n                      rows={3}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Cargo Photos */}\n              {selectedRequest?.cargoPhotos && selectedRequest.cargoPhotos.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-lg\">\n                      <Package className=\"w-5 h-5 mr-2\" />\n                      Фотографии груза\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3\">\n                      {selectedRequest.cargoPhotos.map((photo: string, index: number) => (\n                        <button\n                          key={index}\n                          onClick={() => window.open(photo, '_blank')}\n                          className=\"aspect-square rounded-lg overflow-hidden border border-border hover:opacity-75 transition-opacity bg-gray-50\"\n                        >\n                          <img\n                            src={photo}\n                            alt={`Фото груза ${index + 1}`}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </button>\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Нажмите на фото для увеличения\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Transport */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-lg\">\n                    <Truck className=\"w-5 h-5 mr-2\" />\n                    Назначение транспорта\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"driverName\">ФИО водителя</Label>\n                      <Input\n                        id=\"driverName\"\n                        value={editData.transportInfo.driverName}\n                        onChange={(e) => setEditData(prev => ({\n                          ...prev,\n                          transportInfo: { ...prev.transportInfo, driverName: e.target.value }\n                        }))}\n                        placeholder=\"Иванов Иван Иванович\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"driverPhone\">Телефон водителя</Label>\n                      <Input\n                        id=\"driverPhone\"\n                        value={editData.transportInfo.driverPhone}\n                        onChange={(e) => setEditData(prev => ({\n                          ...prev,\n                          transportInfo: { ...prev.transportInfo, driverPhone: e.target.value }\n                        }))}\n                        placeholder=\"+7 (777) 123-45-67\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"vehicleModel\">Модель ТС</Label>\n                      <Input\n                        id=\"vehicleModel\"\n                        value={editData.transportInfo.vehicleModel}\n                        onChange={(e) => setEditData(prev => ({\n                          ...prev,\n                          transportInfo: { ...prev.transportInfo, vehicleModel: e.target.value }\n                        }))}\n                        placeholder=\"КамАЗ 5320\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"vehiclePlate\">Гос. номер</Label>\n                      <Input\n                        id=\"vehiclePlate\"\n                        value={editData.transportInfo.vehiclePlate}\n                        onChange={(e) => setEditData(prev => ({\n                          ...prev,\n                          transportInfo: { ...prev.transportInfo, vehiclePlate: e.target.value }\n                        }))}\n                        placeholder=\"123 ABC 01\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Actions */}\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n                  Отмена\n                </Button>\n                <Button \n                  onClick={handleSaveChanges}\n                  disabled={updateRequestMutation.isPending}\n                >\n                  {updateRequestMutation.isPending ? \"Сохранение...\" : \"Сохранить изменения\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n      </div>\n    </Layout>\n  );\n}","size_bytes":29042},"server/telegram.ts":{"content":"import type { ShipmentRequest } from \"@shared/schema\";\n\ninterface TelegramMessage {\n  chat_id: string;\n  text: string;\n  parse_mode?: string;\n}\n\nexport class TelegramNotificationService {\n  private botToken: string;\n  private chatId: string;\n\n  constructor() {\n    this.botToken = process.env.TELEGRAM_BOT_TOKEN || \"\";\n    this.chatId = process.env.TELEGRAM_CHAT_ID || \"\";\n  }\n\n  async sendNewRequestNotification(request: ShipmentRequest): Promise<void> {\n    if (!this.botToken || !this.chatId) {\n      console.warn(\"Telegram credentials not configured, skipping notification\");\n      return;\n    }\n\n    const categoryText = request.category === 'astana' ? '🏢 Астана' : '🚛 Межгород';\n    const statusEmoji = this.getStatusEmoji(request.status);\n    \n    const message = `\n🔔 *Новая заявка на перевозку*\n\n📋 *Номер заявки:* \\`${request.requestNumber}\\`\n📦 *Категория:* ${categoryText}\n${statusEmoji} *Статус:* ${this.getStatusText(request.status)}\n\n📦 *Груз:* ${request.cargoName}\n${request.cargoWeightKg ? `⚖️ *Вес:* ${request.cargoWeightKg} кг` : ''}\n${request.cargoVolumeM3 ? `📏 *Объем:* ${request.cargoVolumeM3} м³` : ''}\n\n📍 *Загрузка:* ${request.loadingAddress}\n${request.loadingCity ? `🏙️ *Город загрузки:* ${request.loadingCity}` : ''}\n\n📍 *Выгрузка:* ${request.unloadingAddress}\n${request.unloadingCity ? `🏙️ *Город выгрузки:* ${request.unloadingCity}` : ''}\n\n${request.loadingContactPerson ? `👤 *Контакт загрузки:* ${request.loadingContactPerson}` : ''}\n${request.loadingContactPhone ? `📞 ${request.loadingContactPhone}` : ''}\n\n${request.unloadingContactPerson ? `👤 *Контакт выгрузки:* ${request.unloadingContactPerson}` : ''}\n${request.unloadingContactPhone ? `📞 ${request.unloadingContactPhone}` : ''}\n\n${request.desiredShipmentDatetime ? `📅 *Желаемая дата:* ${new Date(request.desiredShipmentDatetime).toLocaleString('ru-RU')}` : ''}\n\n${request.specialRequirements ? `⚠️ *Особые требования:* ${request.specialRequirements}` : ''}\n${request.notes ? `📝 *Примечания:* ${request.notes}` : ''}\n\n🕐 *Создана:* ${new Date(request.createdAt!).toLocaleString('ru-RU')}\n\n🔗 *Для обработки:* /dashboard\n    `.trim();\n\n    await this.sendMessage(message);\n  }\n\n  async sendStatusUpdateNotification(request: ShipmentRequest, oldStatus: string, newStatus: string): Promise<void> {\n    if (!this.botToken || !this.chatId) {\n      return;\n    }\n\n    const statusEmoji = this.getStatusEmoji(newStatus);\n    const message = `\n🔄 *Статус заявки изменен*\n\n📋 *Номер:* \\`${request.requestNumber}\\`\n📦 *Груз:* ${request.cargoName}\n\n📈 *Статус изменен:*\n${this.getStatusEmoji(oldStatus)} ${this.getStatusText(oldStatus)} → ${statusEmoji} ${this.getStatusText(newStatus)}\n\n🕐 *Время обновления:* ${new Date().toLocaleString('ru-RU')}\n    `.trim();\n\n    await this.sendMessage(message);\n  }\n\n  private async sendMessage(text: string): Promise<void> {\n    try {\n      const message: TelegramMessage = {\n        chat_id: this.chatId,\n        text: text,\n        parse_mode: 'Markdown'\n      };\n\n      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(message),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        console.error('Telegram API error:', error);\n      } else {\n        console.log('Telegram notification sent successfully');\n      }\n    } catch (error) {\n      console.error('Error sending Telegram notification:', error);\n    }\n  }\n\n  private getStatusEmoji(status: string): string {\n    const statusEmojis: Record<string, string> = {\n      'new': '🆕',\n      'processing': '⚙️',\n      'assigned': '👨‍💼',\n      'transit': '🚛',\n      'delivered': '✅',\n      'cancelled': '❌'\n    };\n    return statusEmojis[status] || '📋';\n  }\n\n  private getStatusText(status: string): string {\n    const statusTexts: Record<string, string> = {\n      'new': 'Новая',\n      'processing': 'В обработке',\n      'assigned': 'Назначена',\n      'transit': 'В пути',\n      'delivered': 'Доставлена',\n      'cancelled': 'Отменена'\n    };\n    return statusTexts[status] || status;\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.botToken || !this.chatId) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/getMe`);\n      return response.ok;\n    } catch (error) {\n      console.error('Telegram connection test failed:', error);\n      return false;\n    }\n  }\n}\n\nexport const telegramService = new TelegramNotificationService();","size_bytes":4996},"client/src/components/ProtectedRoute.tsx":{"content":"import { ReactElement } from \"react\";\nimport { Redirect } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { auth } from \"@/lib/auth\";\n\ninterface ProtectedRouteProps {\n  children: ReactElement;\n  allowedRoles?: string[];\n}\n\nexport function ProtectedRoute({ children, allowedRoles = [\"employee\", \"manager\"] }: ProtectedRouteProps) {\n  const { data: user, isLoading } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      return await auth.getCurrentUser();\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Проверка доступа...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  if (!allowedRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Доступ запрещен</h1>\n          <p className=\"text-gray-600 mb-4\">\n            У вас нет прав доступа к этой странице. Требуемые роли: {allowedRoles.join(\", \")}.\n          </p>\n          <p className=\"text-sm text-gray-500 mb-6\">\n            Ваша текущая роль: <span className=\"font-medium\">{user.role}</span>\n          </p>\n          <button \n            onClick={() => window.history.back()}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Вернуться назад\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n}","size_bytes":2511},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Layout } from \"@/components/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  LineChart, \n  Line, \n  BarChart, \n  Bar, \n  PieChart, \n  Pie, \n  Cell, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend, \n  ResponsiveContainer \n} from \"recharts\";\nimport { \n  TrendingUp, \n  Package, \n  Clock, \n  DollarSign, \n  Target, \n  Truck,\n  BarChart3,\n  PieChart as PieChartIcon\n} from \"lucide-react\";\n\ninterface AnalyticsData {\n  monthlyStats: Array<{ month: string; astana: number; intercity: number; total: number }>;\n  categoryStats: { astana: number; intercity: number };\n  statusDistribution: Array<{ status: string; count: number }>;\n  averagePrice: { astana: number | null; intercity: number | null };\n  kpiMetrics: {\n    averageDeliveryTime: number;\n    onTimeDeliveryRate: number;\n    totalRevenue: number;\n    avgOrderValue: number;\n  };\n}\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\nconst STATUS_COLORS: Record<string, string> = {\n  'new': '#3b82f6',\n  'processing': '#f59e0b', \n  'assigned': '#8b5cf6',\n  'transit': '#06b6d4',\n  'delivered': '#10b981',\n  'cancelled': '#ef4444'\n};\n\nconst STATUS_LABELS: Record<string, string> = {\n  'new': 'Новые',\n  'processing': 'В обработке',\n  'assigned': 'Назначены',\n  'transit': 'В пути',\n  'delivered': 'Доставлены',\n  'cancelled': 'Отменены'\n};\n\nexport default function Analytics() {\n  const { data: analytics, isLoading, error } = useQuery<AnalyticsData>({\n    queryKey: ['/api/analytics'],\n  });\n\n  if (isLoading) {\n    return (\n      <Layout>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Загрузка аналитики...</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (error || !analytics) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center text-red-600\">\n            Ошибка загрузки данных аналитики\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  // Prepare chart data\n  const monthlyChartData = analytics.monthlyStats.map(stat => ({\n    ...stat,\n    monthName: new Date(stat.month + '-01').toLocaleDateString('ru-RU', { \n      year: 'numeric', \n      month: 'short' \n    })\n  }));\n\n  const categoryChartData = [\n    { name: 'Астана', value: analytics.categoryStats.astana, color: '#3b82f6' },\n    { name: 'Междугородние', value: analytics.categoryStats.intercity, color: '#10b981' }\n  ];\n\n  const statusChartData = analytics.statusDistribution.map(item => ({\n    name: STATUS_LABELS[item.status] || item.status,\n    value: item.count,\n    color: STATUS_COLORS[item.status] || '#6b7280'\n  }));\n\n  return (\n    <Layout>\n      <div className=\"space-y-6 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Аналитика и KPI</h1>\n            <p className=\"text-gray-600 mt-1\">Визуальный анализ эффективности логистических операций</p>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-green-50 text-green-700 border-green-200\">\n            <BarChart3 className=\"w-4 h-4 mr-1\" />\n            Обновлено в реальном времени\n          </Badge>\n        </div>\n\n        {/* KPI Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-blue-800\">Общая выручка</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-900\">\n                {analytics.kpiMetrics.totalRevenue.toLocaleString('ru-RU')} ₸\n              </div>\n              <p className=\"text-xs text-blue-600 mt-1\">\n                Средний чек: {analytics.kpiMetrics.avgOrderValue.toLocaleString('ru-RU')} ₸\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-green-800\">Доставка в срок</CardTitle>\n              <Target className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-900\">\n                {analytics.kpiMetrics.onTimeDeliveryRate.toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-green-600 mt-1\">\n                Показатель качества\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-purple-800\">Среднее время доставки</CardTitle>\n              <Clock className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-900\">\n                {analytics.kpiMetrics.averageDeliveryTime} дня\n              </div>\n              <p className=\"text-xs text-purple-600 mt-1\">\n                Эффективность логистики\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-orange-800\">Всего заявок</CardTitle>\n              <Package className=\"h-4 w-4 text-orange-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-900\">\n                {analytics.categoryStats.astana + analytics.categoryStats.intercity}\n              </div>\n              <p className=\"text-xs text-orange-600 mt-1\">\n                За весь период\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Row 1 */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <TrendingUp className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Динамика заявок по месяцам\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={monthlyChartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"monthName\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Legend />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"astana\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    name=\"Астана\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"intercity\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    name=\"Междугородние\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"total\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    name=\"Общее\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <PieChartIcon className=\"w-5 h-5 mr-2 text-green-600\" />\n                Распределение по категориям\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={categoryChartData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({name, value, percent}) => `${name}: ${value} (${(percent * 100).toFixed(0)}%)`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {categoryChartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Row 2 */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"w-5 h-5 mr-2 text-purple-600\" />\n                Статусы заявок\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={statusChartData} layout=\"horizontal\">\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis type=\"number\" />\n                  <YAxis dataKey=\"name\" type=\"category\" width={80} />\n                  <Tooltip />\n                  <Bar dataKey=\"value\" fill=\"#3b82f6\">\n                    {statusChartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Truck className=\"w-5 h-5 mr-2 text-indigo-600\" />\n                Средняя стоимость перевозки\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-blue-800\">Астана</p>\n                    <p className=\"text-2xl font-bold text-blue-900\">\n                      {analytics.averagePrice.astana \n                        ? `${analytics.averagePrice.astana.toLocaleString('ru-RU')} ₸`\n                        : 'Нет данных'\n                      }\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-200 rounded-full flex items-center justify-center\">\n                    <Package className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-green-800\">Междугородние</p>\n                    <p className=\"text-2xl font-bold text-green-900\">\n                      {analytics.averagePrice.intercity \n                        ? `${analytics.averagePrice.intercity.toLocaleString('ru-RU')} ₸`\n                        : 'Нет данных'\n                      }\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-200 rounded-full flex items-center justify-center\">\n                    <Truck className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recommendations Section */}\n        <Card className=\"bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200\">\n          <CardHeader>\n            <CardTitle className=\"text-indigo-900\">Рекомендации по оптимизации</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {analytics.kpiMetrics.onTimeDeliveryRate < 90 && (\n              <div className=\"flex items-start space-x-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200\">\n                <Target className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium text-yellow-800\">Улучшение доставки в срок</p>\n                  <p className=\"text-xs text-yellow-700\">\n                    Показатель доставки в срок составляет {analytics.kpiMetrics.onTimeDeliveryRate.toFixed(1)}%. \n                    Рекомендуется оптимизировать планирование маршрутов.\n                  </p>\n                </div>\n              </div>\n            )}\n            \n            {analytics.categoryStats.intercity > analytics.categoryStats.astana * 2 && (\n              <div className=\"flex items-start space-x-3 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                <TrendingUp className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium text-blue-800\">Расширение городских перевозок</p>\n                  <p className=\"text-xs text-blue-700\">\n                    Междугородние перевозки преобладают. Возможность развития услуг по Астане.\n                  </p>\n                </div>\n              </div>\n            )}\n            \n            <div className=\"flex items-start space-x-3 p-3 bg-green-50 rounded-lg border border-green-200\">\n              <DollarSign className=\"w-5 h-5 text-green-600 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">Общая эффективность</p>\n                <p className=\"text-xs text-green-700\">\n                  Система работает стабильно. Продолжайте мониторинг ключевых показателей.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}","size_bytes":15128},"client/src/pages/my-deliveries.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Search, \n  Package, \n  Calendar, \n  MapPin, \n  Phone,\n  User,\n  AlertCircle,\n  CheckCircle\n} from \"lucide-react\";\nimport { StatusChip } from \"@/components/status-chip\";\nimport { format } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport logoPath from \"@assets/1571623_1754368340277.png\";\n\ninterface ShipmentRequest {\n  id: number;\n  requestNumber: string;\n  category: string;\n  status: string;\n  cargoName: string;\n  cargoWeightKg?: string;\n  cargoVolumeM3?: string;\n  loadingAddress: string;\n  unloadingAddress: string;\n  loadingCity?: string;\n  unloadingCity?: string;\n  createdAt: string;\n  desiredShipmentDatetime?: string;\n  priceKzt?: string;\n  transportInfo?: any;\n}\n\nexport default function MyDeliveries() {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [requests, setRequests] = useState<ShipmentRequest[]>([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  const { toast } = useToast();\n\n  const searchMutation = useMutation({\n    mutationFn: async (phone: string) => {\n      const response = await apiRequest(\"POST\", \"/api/requests-by-phone\", {\n        clientPhone: phone\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setRequests(data.requests || []);\n      setHasSearched(true);\n      toast({\n        title: \"Поиск выполнен\",\n        description: `Найдено заявок: ${data.requests?.length || 0}`\n      });\n    },\n    onError: (error) => {\n      setRequests([]);\n      setHasSearched(true);\n      toast({\n        title: \"Ошибка поиска\",\n        description: \"Не удалось найти заявки по указанному номеру\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSearch = () => {\n    if (!phoneNumber.trim()) {\n      toast({\n        title: \"Введите номер телефона\",\n        description: \"Для поиска заявок необходимо указать номер телефона\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    searchMutation.mutate(phoneNumber.trim());\n  };\n\n  const getStatusText = (status: string) => {\n    const statusMap: Record<string, string> = {\n      'new': 'Новая',\n      'processing': 'В обработке',\n      'assigned': 'Назначена',\n      'transit': 'В пути',\n      'delivered': 'Доставлена',\n      'cancelled': 'Отменена'\n    };\n    return statusMap[status] || status;\n  };\n\n  const getCategoryText = (category: string) => {\n    return category === 'astana' ? 'Астана' : 'Межгород';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-100\">\n      <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-16 h-16 bg-white border border-gray-200 rounded-xl flex items-center justify-center shadow-lg p-2\">\n              <img \n                src={logoPath} \n                alt=\"ХРОМ-KZ\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900\">Отслеживание доставок</h1>\n          <p className=\"text-xl text-gray-600\">\n            Проверьте статус ваших заявок на доставку\n          </p>\n        </div>\n\n        {/* Search Form */}\n        <Card className=\"max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Search className=\"w-5 h-5\" />\n              <span>Поиск заявок</span>\n            </CardTitle>\n            <CardDescription>\n              Введите номер телефона, указанный при оформлении заявки\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Input\n                placeholder=\"+7 (777) 123-45-67\"\n                value={phoneNumber}\n                onChange={(e) => setPhoneNumber(e.target.value)}\n                className=\"text-center text-lg\"\n              />\n            </div>\n            <Button \n              onClick={handleSearch}\n              disabled={searchMutation.isPending}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {searchMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Поиск...\n                </>\n              ) : (\n                <>\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Найти заявки\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Results */}\n        {hasSearched && (\n          <div className=\"space-y-6\">\n            {requests.length === 0 ? (\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  По указанному номеру телефона заявки не найдены. \n                  Проверьте правильность номера или обратитесь в службу поддержки.\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <>\n                <div className=\"text-center\">\n                  <Alert className=\"max-w-md mx-auto border-green-200 bg-green-50\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <AlertDescription className=\"text-green-800\">\n                      Найдено заявок: {requests.length}\n                    </AlertDescription>\n                  </Alert>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {requests.map((request) => (\n                    <Card key={request.id} className=\"hover:shadow-lg transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <CardTitle className=\"text-xl\">{request.requestNumber}</CardTitle>\n                            <Badge variant=\"outline\">{getCategoryText(request.category)}</Badge>\n                            <StatusChip status={request.status} />\n                          </div>\n                          <div className=\"text-right text-sm text-muted-foreground\">\n                            <div>Создана:</div>\n                            <div>{format(new Date(request.createdAt), \"dd.MM.yyyy\", { locale: ru })}</div>\n                          </div>\n                        </div>\n                        {request.desiredShipmentDatetime && (\n                          <CardDescription className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4 text-blue-600\" />\n                            <span className=\"text-blue-700\">\n                              Желаемая дата: {format(new Date(request.desiredShipmentDatetime), \"dd MMMM yyyy\", { locale: ru })}\n                            </span>\n                          </CardDescription>\n                        )}\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <h4 className=\"font-medium text-lg text-foreground mb-2\">{request.cargoName}</h4>\n                            <div className=\"flex gap-6 text-sm text-muted-foreground\">\n                              {request.cargoWeightKg && (\n                                <span className=\"flex items-center space-x-1\">\n                                  <Package className=\"w-4 h-4\" />\n                                  <span>{request.cargoWeightKg} кг</span>\n                                </span>\n                              )}\n                              {request.cargoVolumeM3 && (\n                                <span className=\"flex items-center space-x-1\">\n                                  <Package className=\"w-4 h-4\" />\n                                  <span>{request.cargoVolumeM3} м³</span>\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-start space-x-3\">\n                                <MapPin className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                                <div>\n                                  <div className=\"font-medium text-green-700\">Место загрузки</div>\n                                  <div className=\"text-sm text-gray-600\">\n                                    {request.loadingCity && `${request.loadingCity}, `}\n                                    {request.loadingAddress}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-start space-x-3\">\n                                <MapPin className=\"w-5 h-5 text-red-600 mt-0.5 flex-shrink-0\" />\n                                <div>\n                                  <div className=\"font-medium text-red-700\">Место выгрузки</div>\n                                  <div className=\"text-sm text-gray-600\">\n                                    {request.unloadingCity && `${request.unloadingCity}, `}\n                                    {request.unloadingAddress}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Transport Info */}\n                          {request.transportInfo && (\n                            <div className=\"pt-4 border-t bg-gray-50 -mx-6 px-6 py-4\">\n                              <h5 className=\"font-medium mb-3 flex items-center space-x-2\">\n                                <User className=\"w-4 h-4\" />\n                                <span>Информация о транспорте</span>\n                              </h5>\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                                {request.transportInfo.driver_name && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Водитель:</span>\n                                    <span className=\"ml-2 font-medium\">{request.transportInfo.driver_name}</span>\n                                  </div>\n                                )}\n                                {request.transportInfo.driver_phone && (\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                                    <span className=\"font-medium\">{request.transportInfo.driver_phone}</span>\n                                  </div>\n                                )}\n                                {request.transportInfo.vehicle_model && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Автомобиль:</span>\n                                    <span className=\"ml-2 font-medium\">{request.transportInfo.vehicle_model}</span>\n                                  </div>\n                                )}\n                                {request.transportInfo.vehicle_plate && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Гос. номер:</span>\n                                    <span className=\"ml-2 font-medium\">{request.transportInfo.vehicle_plate}</span>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Price */}\n                          {request.priceKzt && (\n                            <div className=\"pt-4 border-t\">\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"text-lg text-muted-foreground\">Стоимость доставки:</span>\n                                <span className=\"font-bold text-2xl text-green-600\">\n                                  {parseInt(request.priceKzt).toLocaleString()} ₸\n                                </span>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        )}\n\n        {/* Contact Info */}\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-2\">\n              <h3 className=\"font-medium text-blue-900\">Нужна помощь?</h3>\n              <p className=\"text-blue-700\">\n                Свяжитесь с нами: <strong>+7 (702) 997 00 94</strong>\n              </p>\n              <p className=\"text-sm text-blue-600\">\n                Email: nurbek@creativegroup.kz\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14527},"client/src/pages/my-orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Layout } from \"@/components/layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Search, \n  Package, \n  Calendar, \n  MapPin, \n  Eye,\n  Filter\n} from \"lucide-react\";\nimport { StatusChip } from \"@/components/status-chip\";\nimport { format } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\n\ninterface ShipmentRequest {\n  id: number;\n  requestNumber: string;\n  category: string;\n  status: string;\n  cargoName: string;\n  cargoWeightKg?: string;\n  cargoVolumeM3?: string;\n  loadingAddress: string;\n  unloadingAddress: string;\n  loadingCity?: string;\n  unloadingCity?: string;\n  createdAt: string;\n  desiredShipmentDatetime?: string;\n  priceKzt?: string;\n}\n\nexport default function MyOrders() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n\n  const { data: requestsData, isLoading } = useQuery<{ requests: ShipmentRequest[] }>({\n    queryKey: ['/api/my-requests'],\n  });\n\n  const requests = requestsData?.requests || [];\n\n  const filteredRequests = requests.filter(request => {\n    const matchesSearch = searchTerm === \"\" || \n      request.requestNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      request.cargoName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"\" || request.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusText = (status: string) => {\n    const statusMap: Record<string, string> = {\n      'new': 'Новая',\n      'processing': 'В обработке',\n      'assigned': 'Назначена',\n      'transit': 'В пути',\n      'delivered': 'Доставлена',\n      'cancelled': 'Отменена'\n    };\n    return statusMap[status] || status;\n  };\n\n  const getCategoryText = (category: string) => {\n    return category === 'astana' ? 'Астана' : 'Межгород';\n  };\n\n  if (isLoading) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Package className=\"w-8 h-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Мои заявки</h1>\n            <p className=\"text-muted-foreground\">Личный кабинет сотрудника</p>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Filter className=\"w-5 h-5\" />\n              <span>Фильтры</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Поиск по номеру заявки или грузу...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-9\"\n                  />\n                </div>\n              </div>\n              <div className=\"md:w-48\">\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-input bg-background rounded-md text-sm\"\n                >\n                  <option value=\"\">Все статусы</option>\n                  <option value=\"new\">Новые</option>\n                  <option value=\"processing\">В обработке</option>\n                  <option value=\"assigned\">Назначенные</option>\n                  <option value=\"transit\">В пути</option>\n                  <option value=\"delivered\">Доставленные</option>\n                  <option value=\"cancelled\">Отмененные</option>\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-2xl font-bold\">{requests.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Всего заявок</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {requests.filter(r => ['new', 'processing'].includes(r.status)).length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">В работе</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {requests.filter(r => ['assigned', 'transit'].includes(r.status)).length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">В доставке</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {requests.filter(r => r.status === 'delivered').length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Доставлено</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Requests List */}\n        <div className=\"space-y-4\">\n          {filteredRequests.length === 0 ? (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center py-8\">\n                  <Package className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-muted-foreground\">\n                    {searchTerm || statusFilter ? \"Заявки не найдены\" : \"У вас пока нет заявок\"}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    {searchTerm || statusFilter \n                      ? \"Попробуйте изменить критерии поиска\" \n                      : \"Создайте новую заявку для начала работы\"\n                    }\n                  </p>\n                  {!searchTerm && !statusFilter && (\n                    <Button asChild className=\"mt-4\">\n                      <Link href=\"/create-request\">Создать заявку</Link>\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredRequests.map((request) => (\n              <Card key={request.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <CardTitle className=\"text-lg\">{request.requestNumber}</CardTitle>\n                      <Badge variant=\"outline\">{getCategoryText(request.category)}</Badge>\n                      <StatusChip status={request.status} />\n                    </div>\n                    <Button asChild variant=\"outline\" size=\"sm\">\n                      <Link href={`/request/${request.id}`}>\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        Просмотр\n                      </Link>\n                    </Button>\n                  </div>\n                  <CardDescription className=\"flex items-center space-x-4 text-sm\">\n                    <span className=\"flex items-center space-x-1\">\n                      <Calendar className=\"w-4 h-4\" />\n                      <span>{format(new Date(request.createdAt), \"dd MMM yyyy\", { locale: ru })}</span>\n                    </span>\n                    {request.desiredShipmentDatetime && (\n                      <span className=\"flex items-center space-x-1 text-blue-600\">\n                        <Calendar className=\"w-4 h-4\" />\n                        <span>Желаемая: {format(new Date(request.desiredShipmentDatetime), \"dd MMM yyyy\", { locale: ru })}</span>\n                      </span>\n                    )}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">{request.cargoName}</h4>\n                      <div className=\"flex gap-4 text-sm text-muted-foreground mt-1\">\n                        {request.cargoWeightKg && (\n                          <span>Вес: {request.cargoWeightKg} кг</span>\n                        )}\n                        {request.cargoVolumeM3 && (\n                          <span>Объем: {request.cargoVolumeM3} м³</span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-start space-x-2\">\n                          <MapPin className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium\">Загрузка</div>\n                            <div className=\"text-muted-foreground\">\n                              {request.loadingCity && `${request.loadingCity}, `}\n                              {request.loadingAddress}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-start space-x-2\">\n                          <MapPin className=\"w-4 h-4 text-red-600 mt-0.5 flex-shrink-0\" />\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium\">Выгрузка</div>\n                            <div className=\"text-muted-foreground\">\n                              {request.unloadingCity && `${request.unloadingCity}, `}\n                              {request.unloadingAddress}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {request.priceKzt && (\n                      <div className=\"pt-2 border-t\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Стоимость:</span>\n                          <span className=\"font-medium text-lg text-green-600\">\n                            {parseInt(request.priceKzt).toLocaleString()} ₸\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}","size_bytes":11842},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Link } from \"wouter\";\nimport { UserPlus, Eye, EyeOff, ArrowLeft, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { auth } from \"@/lib/auth\";\nimport logoPath from \"@assets/1571623_1754368340277.png\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: { username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      // Store token in localStorage directly \n      localStorage.setItem('auth_token', data.token);\n      \n      toast({\n        title: \"Регистрация успешна\",\n        description: `Добро пожаловать в систему, ${data.user.username}! Роль: ${data.user.role}`\n      });\n      \n      // Redirect to dashboard\n      setTimeout(() => {\n        setLocation(\"/dashboard\");\n      }, 1000);\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message || \"Ошибка регистрации\";\n      setErrors([errorMessage]);\n      toast({\n        title: \"Ошибка регистрации\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const validateForm = () => {\n    const newErrors: string[] = [];\n\n    if (!formData.username.trim()) {\n      newErrors.push(\"Имя пользователя обязательно\");\n    } else if (formData.username.length < 3) {\n      newErrors.push(\"Имя пользователя должно содержать минимум 3 символа\");\n    }\n\n    if (!formData.password) {\n      newErrors.push(\"Пароль обязателен\");\n    } else if (formData.password.length < 6) {\n      newErrors.push(\"Пароль должен содержать минимум 6 символов\");\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      newErrors.push(\"Пароли не совпадают\");\n    }\n\n\n\n    setErrors(newErrors);\n    return newErrors.length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    registerMutation.mutate({\n      username: formData.username.trim(),\n      password: formData.password\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors.length > 0) {\n      setErrors([]);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"w-16 h-16 bg-white border border-gray-200 rounded-xl flex items-center justify-center shadow-lg p-2\">\n              <img \n                src={logoPath} \n                alt=\"ХРОМ-KZ\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Регистрация</h1>\n            <p className=\"text-gray-600 mt-2\">\n              Создание нового пользователя в системе ХРОМ-KZ\n            </p>\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-4\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Внимание:</strong> Роли назначаются администратором после регистрации.\n                По умолчанию новые пользователи получают роль \"Сотрудник\".\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Registration Form */}\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"space-y-2 pb-6\">\n            <CardTitle className=\"flex items-center space-x-2 text-xl\">\n              <UserPlus className=\"w-5 h-5 text-blue-600\" />\n              <span>Новый пользователь</span>\n            </CardTitle>\n            <CardDescription>\n              Заполните форму для создания учетной записи\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {/* Error Messages */}\n              {errors.length > 0 && (\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                      {errors.map((error, index) => (\n                        <li key={index}>{error}</li>\n                      ))}\n                    </ul>\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {/* Username */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Имя пользователя</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Введите имя пользователя\"\n                  value={formData.username}\n                  onChange={(e) => handleInputChange(\"username\", e.target.value)}\n                  className=\"h-11\"\n                  autoComplete=\"username\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Минимум 3 символа, используется для входа в систему\n                </p>\n              </div>\n\n\n\n              {/* Password */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Пароль</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Введите пароль\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    className=\"h-11 pr-10\"\n                    autoComplete=\"new-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Минимум 6 символов\n                </p>\n              </div>\n\n              {/* Confirm Password */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Подтверждение пароля</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Повторите пароль\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                    className=\"h-11 pr-10\"\n                    autoComplete=\"new-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11\"\n                disabled={registerMutation.isPending}\n              >\n                {registerMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Создание аккаунта...\n                  </>\n                ) : (\n                  <>\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Создать аккаунт\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Navigation Links */}\n        <div className=\"text-center space-y-3\">\n          <div className=\"text-sm text-muted-foreground\">\n            Уже есть аккаунт?{\" \"}\n            <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n              Войти в систему\n            </Link>\n          </div>\n          \n          <div className=\"pt-2\">\n            <Link href=\"/\" className=\"inline-flex items-center text-sm text-muted-foreground hover:text-foreground\">\n              <ArrowLeft className=\"w-4 h-4 mr-1\" />\n              Вернуться на главную\n            </Link>\n          </div>\n        </div>\n\n        {/* Information */}\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardContent className=\"pt-4\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"flex justify-center\">\n                <CheckCircle className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <h3 className=\"font-medium text-blue-900\">Информация о ролях</h3>\n              <div className=\"text-sm text-blue-700 space-y-1\">\n                <p><strong>Сотрудник:</strong> Создание заявок, просмотр своих заявок</p>\n                <p><strong>Менеджер:</strong> Управление всеми заявками, отчеты, настройки</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11608},"client/src/pages/telegram-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Layout } from \"@/components/layout\";\nimport { MessageCircle, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function TelegramSettings() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const { data: testResult, isLoading: testLoading } = useQuery<{connected: boolean; message: string}>({\n    queryKey: ['/api/telegram/test'],\n    refetchInterval: false,\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/telegram/test\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: data.connected ? \"Подключение успешно\" : \"Ошибка подключения\",\n        description: data.message,\n        variant: data.connected ? \"default\" : \"destructive\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/telegram/test'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка тестирования\",\n        description: \"Не удалось протестировать подключение к Telegram\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const sendTestNotificationMutation = useMutation({\n    mutationFn: async () => {\n      // Create a test request to trigger notification\n      const response = await apiRequest(\"POST\", \"/api/shipment-requests/public\", {\n        category: \"astana\",\n        cargoName: \"🧪 Тестовое уведомление Telegram\",\n        loadingAddress: \"Тестовый адрес загрузки\",\n        unloadingAddress: \"Тестовый адрес выгрузки\",\n        clientName: \"Система тестирования\",\n        clientPhone: \"+77771234567\",\n        notes: \"Это тестовое уведомление для проверки Telegram интеграции\"\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Тестовое уведомление отправлено\",\n        description: `Создана тестовая заявка ${data.requestNumber}. Проверьте Telegram чат.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка отправки\",\n        description: \"Не удалось отправить тестовое уведомление\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleTestConnection = () => {\n    testConnectionMutation.mutate();\n  };\n\n  const handleSendTestNotification = () => {\n    sendTestNotificationMutation.mutate();\n  };\n\n  return (\n    <Layout>\n      <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          <MessageCircle className=\"w-8 h-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Настройки Telegram</h1>\n            <p className=\"text-muted-foreground\">Управление уведомлениями в Telegram</p>\n          </div>\n        </div>\n\n        {/* Connection Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"w-5 h-5\" />\n              <span>Статус подключения</span>\n            </CardTitle>\n            <CardDescription>\n              Текущее состояние подключения к Telegram Bot API\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                {testLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                    <span>Проверка подключения...</span>\n                  </>\n                ) : testResult?.connected ? (\n                  <>\n                    <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                    <span className=\"text-green-700\">Подключено успешно</span>\n                    <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Активно</Badge>\n                  </>\n                ) : (\n                  <>\n                    <XCircle className=\"w-6 h-6 text-red-600\" />\n                    <span className=\"text-red-700\">Ошибка подключения</span>\n                    <Badge variant=\"destructive\">Отключено</Badge>\n                  </>\n                )}\n              </div>\n              <Button \n                onClick={handleTestConnection} \n                disabled={testConnectionMutation.isPending}\n                variant=\"outline\"\n              >\n                {testConnectionMutation.isPending ? \"Тестирование...\" : \"Проверить подключение\"}\n              </Button>\n            </div>\n\n            {testResult?.message && (\n              <Alert className={testResult.connected ? \"border-green-200 bg-green-50\" : \"border-red-200 bg-red-50\"}>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>{testResult.message}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Notification Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Настройки уведомлений</CardTitle>\n            <CardDescription>\n              Система автоматически отправляет уведомления о новых заявках и изменениях статуса\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">Новые заявки</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Уведомления отправляются при создании новых заявок через публичную форму и админку\n                </p>\n                <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">Включено</Badge>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">Изменения статуса</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Уведомления о переходах между статусами заявок\n                </p>\n                <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">Включено</Badge>\n              </div>\n            </div>\n\n            <div className=\"pt-4 border-t\">\n              <Button \n                onClick={handleSendTestNotification}\n                disabled={sendTestNotificationMutation.isPending || !testResult?.connected}\n                className=\"w-full sm:w-auto\"\n              >\n                {sendTestNotificationMutation.isPending ? \"Отправка...\" : \"Отправить тестовое уведомление\"}\n              </Button>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Создаст тестовую заявку и отправит уведомление в Telegram\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Информация о настройке</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"text-sm space-y-2\">\n              <p><strong>Bot Token:</strong> Настроен через переменные окружения</p>\n              <p><strong>Chat ID:</strong> Настроен через переменные окружения</p>\n              <p><strong>Формат уведомлений:</strong> Markdown с эмодзи для лучшей читаемости</p>\n            </div>\n            \n            <Alert>\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Для изменения настроек Bot Token или Chat ID обратитесь к администратору системы.\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}","size_bytes":9107}}}