import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Layout } from "@/components/layout";
import { MessageCircle, CheckCircle, XCircle, AlertTriangle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";

export default function TelegramSettings() {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const { data: testResult, isLoading: testLoading } = useQuery<{connected: boolean; message: string}>({
    queryKey: ['/api/telegram/test'],
    refetchInterval: false,
  });

  const testConnectionMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("GET", "/api/telegram/test");
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: data.connected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ" : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: data.message,
        variant: data.connected ? "default" : "destructive"
      });
      queryClient.invalidateQueries({ queryKey: ['/api/telegram/test'] });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram",
        variant: "destructive"
      });
    }
  });

  const sendTestNotificationMutation = useMutation({
    mutationFn: async () => {
      // Create a test request to trigger notification
      const response = await apiRequest("POST", "/api/shipment-requests/public", {
        category: "astana",
        cargoName: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram",
        loadingAddress: "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏",
        unloadingAddress: "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏",
        clientName: "–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        clientPhone: "+77771234567",
        notes: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
      });
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        description: `–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${data.requestNumber}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —á–∞—Ç.`,
      });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        variant: "destructive"
      });
    }
  });

  const handleTestConnection = () => {
    testConnectionMutation.mutate();
  };

  const handleSendTestNotification = () => {
    sendTestNotificationMutation.mutate();
  };

  return (
    <Layout>
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        <div className="flex items-center space-x-4">
          <MessageCircle className="w-8 h-8 text-blue-600" />
          <div>
            <h1 className="text-3xl font-bold text-foreground">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</h1>
            <p className="text-muted-foreground">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram</p>
          </div>
        </div>

        {/* Connection Status */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <MessageCircle className="w-5 h-5" />
              <span>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</span>
            </CardTitle>
            <CardDescription>
              –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                {testLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                    <span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...</span>
                  </>
                ) : testResult?.connected ? (
                  <>
                    <CheckCircle className="w-6 h-6 text-green-600" />
                    <span className="text-green-700">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ</span>
                    <Badge variant="default" className="bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω–æ</Badge>
                  </>
                ) : (
                  <>
                    <XCircle className="w-6 h-6 text-red-600" />
                    <span className="text-red-700">–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</span>
                    <Badge variant="destructive">–û—Ç–∫–ª—é—á–µ–Ω–æ</Badge>
                  </>
                )}
              </div>
              <Button 
                onClick={handleTestConnection} 
                disabled={testConnectionMutation.isPending}
                variant="outline"
              >
                {testConnectionMutation.isPending ? "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..." : "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"}
              </Button>
            </div>

            {testResult?.message && (
              <Alert className={testResult.connected ? "border-green-200 bg-green-50" : "border-red-200 bg-red-50"}>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>{testResult.message}</AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>

        {/* Notification Settings */}
        <Card>
          <CardHeader>
            <CardTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</CardTitle>
            <CardDescription>
              –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <h4 className="font-medium">–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏</h4>
                <p className="text-sm text-muted-foreground">
                  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—É—é —Ñ–æ—Ä–º—É –∏ –∞–¥–º–∏–Ω–∫—É
                </p>
                <Badge variant="default" className="bg-blue-100 text-blue-800">–í–∫–ª—é—á–µ–Ω–æ</Badge>
              </div>
              
              <div className="space-y-2">
                <h4 className="font-medium">–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</h4>
                <p className="text-sm text-muted-foreground">
                  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞—è–≤–æ–∫
                </p>
                <Badge variant="default" className="bg-blue-100 text-blue-800">–í–∫–ª—é—á–µ–Ω–æ</Badge>
              </div>
            </div>

            <div className="pt-4 border-t">
              <Button 
                onClick={handleSendTestNotification}
                disabled={sendTestNotificationMutation.isPending || !testResult?.connected}
                className="w-full sm:w-auto"
              >
                {sendTestNotificationMutation.isPending ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"}
              </Button>
              <p className="text-sm text-muted-foreground mt-2">
                –°–æ–∑–¥–∞—Å—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Information */}
        <Card>
          <CardHeader>
            <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="text-sm space-y-2">
              <p><strong>Bot Token:</strong> –ù–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è</p>
              <p><strong>Chat ID:</strong> –ù–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è</p>
              <p><strong>–§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</strong> Markdown —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏</p>
            </div>
            
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Bot Token –∏–ª–∏ Chat ID –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
              </AlertDescription>
            </Alert>
          </CardContent>
        </Card>
      </div>
    </Layout>
  );
}