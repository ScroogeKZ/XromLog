import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { 
  Truck, 
  Package, 
  MapPin, 
  Navigation, 
  Clock,
  Phone,
  Mail,
  CheckCircle
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useToast } from "@/hooks/use-toast";

export default function PublicRequest() {
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [formData, setFormData] = useState({
    category: "astana",
    cargoName: "",
    cargoWeightKg: "",
    cargoVolumeM3: "",
    cargoDimensions: "",
    packageCount: "",
    specialRequirements: "",
    loadingAddress: "",
    loadingContactPerson: "",
    loadingContactPhone: "",
    unloadingAddress: "",
    unloadingContactPerson: "",
    unloadingContactPhone: "",
    desiredShipmentDatetime: "",
    notes: "",
    clientName: "",
    clientPhone: "",
    clientEmail: ""
  });
  
  const { toast } = useToast();

  const submitRequestMutation = useMutation({
    mutationFn: async (data: typeof formData) => {
      const processedData = {
        ...data,
        cargoWeightKg: data.cargoWeightKg ? parseFloat(data.cargoWeightKg) : null,
        cargoVolumeM3: data.cargoVolumeM3 ? parseFloat(data.cargoVolumeM3) : null,
        packageCount: data.packageCount ? parseInt(data.packageCount) : null,
        desiredShipmentDatetime: data.desiredShipmentDatetime ? new Date(data.desiredShipmentDatetime).toISOString() : null,
        createdByUserId: 1 // Default system user for public requests
      };
      
      const response = await fetch("/api/shipment-requests", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer public-request"
        },
        body: JSON.stringify(processedData)
      });
      
      if (!response.ok) throw new Error('Failed to submit request');
      return response.json();
    },
    onSuccess: () => {
      setIsSubmitted(true);
      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
      });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        variant: "destructive"
      });
    }
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    submitRequestMutation.mutate(formData);
  };

  const handleChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-background">
        {/* Header */}
        <header className="glass-card card-shadow">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center shadow-lg">
                <Truck className="w-7 h-7 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-foreground">–•—Ä–æ–º –õ–æ–≥–∏—Å—Ç–∏–∫–∞</h1>
                <p className="text-muted-foreground">–ù–∞–¥–µ–∂–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏</p>
              </div>
            </div>
          </div>
        </header>

        {/* Success Message */}
        <div className="max-w-2xl mx-auto px-4 py-16">
          <Card className="glass-card card-shadow text-center">
            <CardContent className="p-12">
              <div className="w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6">
                <CheckCircle className="w-10 h-10 text-white" />
              </div>
              <h2 className="text-3xl font-bold text-foreground mb-4">
                –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
              </h2>
              <p className="text-lg text-muted-foreground mb-6">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
              </p>
              <div className="space-y-2 text-sm text-muted-foreground">
                <p>üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (717) 123-45-67</p>
                <p>‚úâÔ∏è Email: info@chrome-logistics.kz</p>
                <p>‚è∞ –†–∞–±–æ—Ç–∞–µ–º: –ø–Ω-–ø—Ç 9:00-18:00, —Å–± 9:00-15:00</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="glass-card card-shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center shadow-lg">
                <Truck className="w-7 h-7 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-foreground">–•—Ä–æ–º –õ–æ–≥–∏—Å—Ç–∏–∫–∞</h1>
                <p className="text-muted-foreground">–ù–∞–¥–µ–∂–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏</p>
              </div>
            </div>
            <div className="hidden md:flex items-center space-x-6">
              <div className="flex items-center space-x-2 text-muted-foreground">
                <Phone className="w-4 h-4" />
                <span>+7 (717) 123-45-67</span>
              </div>
              <div className="flex items-center space-x-2 text-muted-foreground">
                <Mail className="w-4 h-4" />
                <span>info@chrome-logistics.kz</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-foreground mb-4">
            –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            –ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–º –≤–∞—à –≥—Ä—É–∑ –ø–æ –ê—Å—Ç–∞–Ω–µ –∏ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. 
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.
          </p>
        </div>

        {/* Benefits */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
          <Card className="glass-card card-shadow hover-lift text-center">
            <CardContent className="p-6">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                <Clock className="w-6 h-6 text-white" />
              </div>
              <h3 className="font-semibold text-foreground mb-2">–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç</h3>
              <p className="text-sm text-muted-foreground">–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 15 –º–∏–Ω—É—Ç</p>
            </CardContent>
          </Card>
          <Card className="glass-card card-shadow hover-lift text-center">
            <CardContent className="p-6">
              <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-green-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                <Package className="w-6 h-6 text-white" />
              </div>
              <h3 className="font-semibold text-foreground mb-2">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
              <p className="text-sm text-muted-foreground">–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞</p>
            </CardContent>
          </Card>
          <Card className="glass-card card-shadow hover-lift text-center">
            <CardContent className="p-6">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                <Truck className="w-6 h-6 text-white" />
              </div>
              <h3 className="font-semibold text-foreground mb-2">–û–ø—ã—Ç</h3>
              <p className="text-sm text-muted-foreground">–ë–æ–ª–µ–µ 10 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ</p>
            </CardContent>
          </Card>
        </div>

        {/* Request Form */}
        <Card className="glass-card card-shadow-lg max-w-4xl mx-auto">
          <CardHeader>
            <CardTitle className="text-2xl text-center">–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-8">
              {/* Client Information */}
              <Card className="bg-accent/30">
                <CardHeader>
                  <CardTitle className="text-lg flex items-center">
                    <Phone className="w-5 h-5 mr-2" />
                    –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="clientName">–§–ò–û *</Label>
                      <Input
                        id="clientName"
                        required
                        value={formData.clientName}
                        onChange={(e) => handleChange('clientName', e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û"
                      />
                    </div>
                    <div>
                      <Label htmlFor="clientPhone">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                      <Input
                        id="clientPhone"
                        type="tel"
                        required
                        value={formData.clientPhone}
                        onChange={(e) => handleChange('clientPhone', e.target.value)}
                        placeholder="+7 (___) ___-__-__"
                      />
                    </div>
                  </div>
                  <div>
                    <Label htmlFor="clientEmail">Email</Label>
                    <Input
                      id="clientEmail"
                      type="email"
                      value={formData.clientEmail}
                      onChange={(e) => handleChange('clientEmail', e.target.value)}
                      placeholder="your@email.com"
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Category Selection */}
              <div>
                <Label className="text-base font-medium">–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ *</Label>
                <RadioGroup
                  value={formData.category}
                  onValueChange={(value) => handleChange('category', value)}
                  className="flex space-x-6 mt-3"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="astana" id="astana" />
                    <Label htmlFor="astana">–ü–æ –ê—Å—Ç–∞–Ω–µ</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="intercity" id="intercity" />
                    <Label htmlFor="intercity">–ú–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω—è—è</Label>
                  </div>
                </RadioGroup>
              </div>

              {/* Cargo Information */}
              <Card className="bg-accent/30">
                <CardHeader>
                  <CardTitle className="text-lg flex items-center">
                    <Package className="w-5 h-5 mr-2" />
                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="cargoName">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ *</Label>
                      <Input
                        id="cargoName"
                        required
                        value={formData.cargoName}
                        onChange={(e) => handleChange('cargoName', e.target.value)}
                        placeholder="–ß—Ç–æ –ø–µ—Ä–µ–≤–æ–∑–∏–º?"
                      />
                    </div>
                    <div>
                      <Label htmlFor="packageCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç</Label>
                      <Input
                        id="packageCount"
                        type="number"
                        min="0"
                        value={formData.packageCount}
                        onChange={(e) => handleChange('packageCount', e.target.value)}
                        placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫/–ø–∞–ª–ª–µ—Ç"
                      />
                    </div>
                    <div>
                      <Label htmlFor="cargoWeightKg">–í–µ—Å (–∫–≥)</Label>
                      <Input
                        id="cargoWeightKg"
                        type="number"
                        step="0.01"
                        min="0"
                        value={formData.cargoWeightKg}
                        onChange={(e) => handleChange('cargoWeightKg', e.target.value)}
                        placeholder="–ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å"
                      />
                    </div>
                    <div>
                      <Label htmlFor="cargoDimensions">–ì–∞–±–∞—Ä–∏—Ç—ã (–î—Ö–®—Ö–í)</Label>
                      <Input
                        id="cargoDimensions"
                        value={formData.cargoDimensions}
                        onChange={(e) => handleChange('cargoDimensions', e.target.value)}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 120x80x60 —Å–º"
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Addresses */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Loading Address */}
                <Card className="bg-accent/30">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <MapPin className="w-5 h-5 mr-2" />
                      –û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="loadingAddress">–ê–¥—Ä–µ—Å *</Label>
                      <Textarea
                        id="loadingAddress"
                        required
                        rows={2}
                        value={formData.loadingAddress}
                        onChange={(e) => handleChange('loadingAddress', e.target.value)}
                        placeholder="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏"
                      />
                    </div>
                    <div>
                      <Label htmlFor="loadingContactPerson">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ</Label>
                      <Input
                        id="loadingContactPerson"
                        value={formData.loadingContactPerson}
                        onChange={(e) => handleChange('loadingContactPerson', e.target.value)}
                        placeholder="–§–ò–û"
                      />
                    </div>
                    <div>
                      <Label htmlFor="loadingContactPhone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                      <Input
                        id="loadingContactPhone"
                        type="tel"
                        value={formData.loadingContactPhone}
                        onChange={(e) => handleChange('loadingContactPhone', e.target.value)}
                        placeholder="+7 (___) ___-__-__"
                      />
                    </div>
                  </CardContent>
                </Card>

                {/* Unloading Address */}
                <Card className="bg-accent/30">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <Navigation className="w-5 h-5 mr-2" />
                      –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="unloadingAddress">–ê–¥—Ä–µ—Å *</Label>
                      <Textarea
                        id="unloadingAddress"
                        required
                        rows={2}
                        value={formData.unloadingAddress}
                        onChange={(e) => handleChange('unloadingAddress', e.target.value)}
                        placeholder="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                      />
                    </div>
                    <div>
                      <Label htmlFor="unloadingContactPerson">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ</Label>
                      <Input
                        id="unloadingContactPerson"
                        value={formData.unloadingContactPerson}
                        onChange={(e) => handleChange('unloadingContactPerson', e.target.value)}
                        placeholder="–§–ò–û"
                      />
                    </div>
                    <div>
                      <Label htmlFor="unloadingContactPhone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                      <Input
                        id="unloadingContactPhone"
                        type="tel"
                        value={formData.unloadingContactPhone}
                        onChange={(e) => handleChange('unloadingContactPhone', e.target.value)}
                        placeholder="+7 (___) ___-__-__"
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Additional Info */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="desiredShipmentDatetime">–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</Label>
                  <Input
                    id="desiredShipmentDatetime"
                    type="datetime-local"
                    value={formData.desiredShipmentDatetime}
                    onChange={(e) => handleChange('desiredShipmentDatetime', e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="notes">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Label>
                  <Textarea
                    id="notes"
                    rows={3}
                    value={formData.notes}
                    onChange={(e) => handleChange('notes', e.target.value)}
                    placeholder="–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç.–¥."
                  />
                </div>
              </div>

              {/* Submit Button */}
              <div className="text-center pt-6">
                <Button
                  type="submit"
                  size="lg"
                  disabled={submitRequestMutation.isPending}
                  className="bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white font-semibold px-12 py-4 text-lg shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105"
                >
                  {submitRequestMutation.isPending ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...</span>
                    </div>
                  ) : (
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
                  )}
                </Button>
                <p className="text-sm text-muted-foreground mt-4">
                  –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                </p>
              </div>
            </form>
          </CardContent>
        </Card>
      </section>

      {/* Footer */}
      <footer className="glass-card mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div>
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center">
                  <Truck className="w-5 h-5 text-white" />
                </div>
                <h3 className="text-lg font-bold text-foreground">–•—Ä–æ–º –õ–æ–≥–∏—Å—Ç–∏–∫–∞</h3>
              </div>
              <p className="text-muted-foreground text-sm">
                –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ —Å—Ñ–µ—Ä–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É
              </p>
            </div>
            <div>
              <h4 className="font-semibold text-foreground mb-3">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
              <div className="space-y-2 text-sm text-muted-foreground">
                <p>üìû +7 (717) 123-45-67</p>
                <p>‚úâÔ∏è info@chrome-logistics.kz</p>
                <p>üìç –≥. –ê—Å—Ç–∞–Ω–∞, —É–ª. –ö–µ–Ω–µ—Å–∞—Ä—ã 42</p>
              </div>
            </div>
            <div>
              <h4 className="font-semibold text-foreground mb-3">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h4>
              <div className="space-y-2 text-sm text-muted-foreground">
                <p>–ü–Ω-–ü—Ç: 9:00 - 18:00</p>
                <p>–°—É–±–±–æ—Ç–∞: 9:00 - 15:00</p>
                <p>–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –≤—ã—Ö–æ–¥–Ω–æ–π</p>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}